[
  {
    "objectID": "lectures/lecture1.html",
    "href": "lectures/lecture1.html",
    "title": "Lecture 1: Boxscore Metrics",
    "section": "",
    "text": "Who is the best shooter in the NBA?\nHow do we determine this using data? \n\n\nWhile they may be predictive, box score metrics are primarily retrospective: they tell (part of) the story of what happened.\n\n\n\nIn this lecture, we will practice using functions from the tidyverse suite of packages (especially dplyr) to manipulate tables of NBA box score data. Hopefully, much of the functionality we encounter in this lecture will be familiar to you. But, if you need a high-level refresher, I highly recommend the following resources:\n\nChapter 3 and Chapter 5 of R for Data Science.\nSection 1.9 and Chapter 3 of *Data Science: A First Introduction.\n\nWe will use\n\n\n\n\n\n\nSystem setup\n\n\n\n\n\nFor this lecture, we will use a new R package to scrape NBA boxscore data. In order to do this, it is critical that you have already installed the devtools package, as noted in the Getting Started guide. To check that you have successfully installed the package, run the following code.\n\nif(!\"devtools\" %in% rownames(installed.packages())){\n  stop(\"devtools not installed\")\n}",
    "crumbs": [
      "Lecture 1: Boxscore Metrics"
    ]
  },
  {
    "objectID": "lectures/lecture1.html#overview",
    "href": "lectures/lecture1.html#overview",
    "title": "Lecture 1: Boxscore Metrics",
    "section": "",
    "text": "Who is the best shooter in the NBA?\nHow do we determine this using data? \n\n\nWhile they may be predictive, box score metrics are primarily retrospective: they tell (part of) the story of what happened.\n\n\n\nIn this lecture, we will practice using functions from the tidyverse suite of packages (especially dplyr) to manipulate tables of NBA box score data. Hopefully, much of the functionality we encounter in this lecture will be familiar to you. But, if you need a high-level refresher, I highly recommend the following resources:\n\nChapter 3 and Chapter 5 of R for Data Science.\nSection 1.9 and Chapter 3 of *Data Science: A First Introduction.\n\nWe will use\n\n\n\n\n\n\nSystem setup\n\n\n\n\n\nFor this lecture, we will use a new R package to scrape NBA boxscore data. In order to do this, it is critical that you have already installed the devtools package, as noted in the Getting Started guide. To check that you have successfully installed the package, run the following code.\n\nif(!\"devtools\" %in% rownames(installed.packages())){\n  stop(\"devtools not installed\")\n}",
    "crumbs": [
      "Lecture 1: Boxscore Metrics"
    ]
  },
  {
    "objectID": "lectures/lecture1.html#basic-box-score-statistics",
    "href": "lectures/lecture1.html#basic-box-score-statistics",
    "title": "Lecture 1: Boxscore Metrics",
    "section": "Basic box score statistics",
    "text": "Basic box score statistics\n\nScraping and wrangling box score data\nWe will scrape NBA box score data using the hoopR package. We start by installing the package.\n\nif(!\"hoopR\" %in% rownames(installed.packages())){\n  message(\"Package `hoopR' is not currently installed. Installing now\")\n  devtools::install_github(repo = \"sportsdataverse/hoopR\")\n}\nlibrary(tidyverse) # load the tidyverse suite of packages\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.2     ✔ tibble    3.3.0\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.0.4     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\nYou can read more about the package here. One important function is load_nba_player_box, which scrapes individual player’s box score for every game.\n\nraw_box &lt;-\n  hoopR::load_nba_player_box(seasons = 2002:(hoopR::most_recent_nba_season()))\n\n\nTo study shooting ability, we need to aggregate the individual game-level data into season-level totals. Conceptually, we can accomplish this by first dividing the full data table into several smaller tables, one for each combination of player and season. Then, we can sum the number of field goals, three point shots, and free throws attempted and made by each player in each of their season. This order of operations is an example of the split-apply-combine paradigm, which is implemented in dplyr using group_by.\n\n\nseason_box &lt;-\n  raw_box %&gt;%\n  select(season, athlete_display_name,\n         minutes, \n         field_goals_made, field_goals_attempted,\n         three_point_field_goals_made, three_point_field_goals_attempted,\n         free_throws_made, free_throws_attempted,\n         did_not_play) %&gt;%\n  rename(\n    Player = athlete_display_name,\n    FGM = field_goals_made,\n    FGA = field_goals_attempted,\n    TPM = three_point_field_goals_made,\n    TPA = three_point_field_goals_attempted,\n    FTM = free_throws_made, \n    FTA = free_throws_attempted) %&gt;%\n  filter(!did_not_play) %&gt;%\n  filter(!(is.na(FGA) & is.na(TPA) & is.na(FTA))) %&gt;% # filter out missing data records\n  group_by(Player, season) %&gt;%\n  summarise(\n    minutes = sum(minutes),\n    n_games = n(),\n    FGM = sum(FTM),\n    FGA = sum(FGA),\n    TPM = sum(TPM),\n    TPA = sum(TPA),\n    FTM = sum(FTM),\n    FTA = sum(FTA),\n    .groups = \"drop\") \n\nIn total, we have 11780 player-season observations. Here is a quick snapshot\n\nseason_box %&gt;%\n  filter(Player == \"Dirk Nowitzki\")\n\n# A tibble: 18 × 10\n   Player        season minutes n_games   FGM   FGA   TPM   TPA   FTM   FTA\n   &lt;chr&gt;          &lt;int&gt;   &lt;dbl&gt;   &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt;\n 1 Dirk Nowitzki   2002    3248      84   505  1422   155   378   505   590\n 2 Dirk Nowitzki   2003    3839      97   586  1802   175   451   586   661\n 3 Dirk Nowitzki   2004    3127      82   407  1410   106   305   407   465\n 4 Dirk Nowitzki   2005    3571      91   707  1701   101   258   707   819\n 5 Dirk Nowitzki   2006    4069     104   744  1983   133   338   744   827\n 6 Dirk Nowitzki   2007    3058      84   540  1435    76   192   540   601\n 7 Dirk Nowitzki   2008    2980      82   520  1405    85   238   520   596\n 8 Dirk Nowitzki   2009    3446      91   571  1786    67   191   571   638\n 9 Dirk Nowitzki   2010    3273      87   576  1602    55   128   576   628\n10 Dirk Nowitzki   2011    3331      94   570  1575    89   218   570   629\n11 Dirk Nowitzki   2012    2231      66   356  1111    79   218   356   397\n12 Dirk Nowitzki   2013    1628      52   164   707    63   151   164   191\n13 Dirk Nowitzki   2014    2896      88   363  1401   132   342   363   407\n14 Dirk Nowitzki   2015    2478      83   281  1151   109   293   281   317\n15 Dirk Nowitzki   2016    2533      80   266  1195   130   353   266   297\n16 Dirk Nowitzki   2017    1421      54    98   678    79   209    98   112\n17 Dirk Nowitzki   2018    1901      77    97   758   138   337    97   108\n18 Dirk Nowitzki   2019     798      52    39   379    67   208    39    50\n\n\n\n\nFrom totals to percentages\nOne way to define the best shooter is to identify the player who made the most shots. We can identify this by arranging our data table in descending order.\n\nseason_box %&gt;%\n  arrange(desc(FGM))\n\n# A tibble: 11,808 × 10\n   Player             season minutes n_games   FGM   FGA   TPM   TPA   FTM   FTA\n   &lt;chr&gt;               &lt;int&gt;   &lt;dbl&gt;   &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt;\n 1 James Harden         2015    3640      99   878  1780   256   674   878  1002\n 2 James Harden         2017    3391      93   847  1760   298   880   847   996\n 3 Kevin Durant         2014    3967     101   839  2137   241   633   839   972\n 4 James Harden         2019    3320      90   836  2186   430  1178   836   956\n 5 Kevin Durant         2010    3472      88   810  1791   138   386   810   902\n 6 James Harden         2020    2943      81   792  1751   341   969   792   920\n 7 Dwyane Wade          2006    3617      92   783  1736    24   106   783   990\n 8 Kobe Bryant          2008    4057     103   780  2153   182   521   780   936\n 9 Shai Gilgeous-Ale…   2025    3426     100   777  2151   198   549   777   872\n10 Russell Westbrook    2017    3017      87   768  2119   220   645   768   912\n# ℹ 11,798 more rows\n\n\nBased on this simple definition, it would appear that James Harden had the two best shooting seasons since at least 2002-03. Lets focus on his 2014-15 season: Harden made 847 field goals. The apparently next best performance is Kevin Durant’s 2014-15 season: Durant made 839 field goals. The difference seems small — only 8 field goals. Do we think this difference is big or small? Taking a closer look, we see that Harden in 2017-18 took 377 fewer shots than Durant in 2014-15 while making eight more. This seems quite impressive!\nTo make this more precise, we can compute the field goal percentage (and similarly for three pointers and free throws). To this end, let’s filter out\n\nseason_box &lt;-\n  season_box %&gt;%\n  filter(FGM &lt;= FGA & TPM &lt;= TPA & FTA &lt;= FTM) %&gt;% # filter out nonsensical\n  mutate(\n    FGP = ifelse(FGA &gt; 0, FGM/FGA, NA_real_),\n    TPP = ifelse(TPA &gt; 0, TPM/TPA, NA_real_),\n    FTP = ifelse(FTA &gt; 0, FTM/FTA, NA_real_))\n\n\nseason_box %&gt;% \n  arrange(desc(FGP)) %&gt;%\n  select(Player, season, FGP, FGM, FGA, n_games)\n\n# A tibble: 821 × 6\n   Player             season   FGP   FGM   FGA n_games\n   &lt;chr&gt;               &lt;int&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt;   &lt;int&gt;\n 1 Chandler Hutchison   2022 1         2     2       6\n 2 Chuck Hayes          2016 1         2     2       2\n 3 Ike Diogu            2012 1         2     2       2\n 4 Malik Newman         2020 1         2     2       1\n 5 Samaki Walker        2006 1         2     2       7\n 6 Trey Johnson         2009 0.8       4     5       4\n 7 Moses Wright         2022 0.75      3     4       4\n 8 David Stockton       2018 0.667     4     6       5\n 9 Eric Mika            2020 0.667     2     3       1\n10 Jarrett Jack         2017 0.667     2     3       2\n# ℹ 811 more rows\n\n\nOk, we need to filter this down \n\nqualified &lt;-\n  season_box %&gt;%\n  filter(FGA &gt;= 50 & TPA &gt;= 25)",
    "crumbs": [
      "Lecture 1: Boxscore Metrics"
    ]
  },
  {
    "objectID": "lectures/lecture1.html#more-nuanced-metrics",
    "href": "lectures/lecture1.html#more-nuanced-metrics",
    "title": "Lecture 1: Boxscore Metrics",
    "section": "More nuanced metrics",
    "text": "More nuanced metrics\n\nEffective Field Goal Percentage\nOne criticism of FGP is that it treats 2-point shots the same as 3-point shots. As a result, the league leader in FGP is usually a center whose shots mostly come from near the rim. Effective Field Goal Percentage (eFGP) adjusts FGP to account for the fact that a made 3-point shots is worth 50% more than a made 2-point shot. The formula for eFGP is \\[\n\\textrm{eFGP} = \\frac{\\textrm{FGM} + 0.5 \\times \\textrm{TPM}}{\\textrm{FGA}}\n\\] ### True Shooting Percentage Both field goal percentage and effective field goal percentage totally ignore free throws. One metric that accounts for all field goals, three pointers, and free throws is true shooting percentage, whose formula is given by",
    "crumbs": [
      "Lecture 1: Boxscore Metrics"
    ]
  },
  {
    "objectID": "exercises/exercises1_boxscore.html",
    "href": "exercises/exercises1_boxscore.html",
    "title": "Constructing Advanced Metrics Using Box Score Data",
    "section": "",
    "text": "We will rely on data from the Lahman Database.\n\n\n\nif(!\"Lahman\" %in% rownames(installed.packages())){\n  message(\"Package `Lahman' not already installed. Installing now\")\n  install.packages(\"Lahman\")\n} else{\n  library(Lahman)\n}",
    "crumbs": [
      "Constructing Advanced Metrics Using Box Score Data"
    ]
  },
  {
    "objectID": "exercises/exercises1_boxscore.html#setup-installing-the-lahman-package",
    "href": "exercises/exercises1_boxscore.html#setup-installing-the-lahman-package",
    "title": "Constructing Advanced Metrics Using Box Score Data",
    "section": "",
    "text": "if(!\"Lahman\" %in% rownames(installed.packages())){\n  message(\"Package `Lahman' not already installed. Installing now\")\n  install.packages(\"Lahman\")\n} else{\n  library(Lahman)\n}",
    "crumbs": [
      "Constructing Advanced Metrics Using Box Score Data"
    ]
  },
  {
    "objectID": "exercises.html",
    "href": "exercises.html",
    "title": "Exercises",
    "section": "",
    "text": "Contains additional exercises to reproduce and extend analyses shown in lecture."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "STAT 479 (Fall 2025): Sports Analytics",
    "section": "",
    "text": "Welcome to STAT 479 (Special Topics in Statistics)! This iteration of the course will focus on sports analytics.\nLectures notes, instructions for the course project, and additional tutorials and exercises will be posted to this website. So, please bookmark this page and check it regularly throughout the course."
  },
  {
    "objectID": "index.html#course-information",
    "href": "index.html#course-information",
    "title": "STAT 479 (Fall 2025): Sports Analytics",
    "section": "Course information",
    "text": "Course information\nDescription: Illustrates the use of statistical modeling and data science techniques to derive actionable insights from sports data. Emphasizes not only technical calculation of advanced metrics but also on written and oral communication to other data scientists and to non-technical audience. Topics may include: deriving team rankings from paired competitions; measuring an individual player’s contribution to their team’s overall success; assessing player performance and team strategy in terms of expected outcomes; forecasting the impact of new rule changes using simulation; and creating new metrics using high-resolution player tracking data.\nLearning Outcomes: Throughout the course you will\n\nImplement appropriate statistical methods to assess player and team performance\nWork with play-by-play and high-resolution tracking data\nProvide constructive and actionable feedback on your peers’ analytic reports\nBuild a personal portfolio of sports data analyses\n\nLocation & Schedule: Tuesdays & Thursdays, 11:00am-12:15pm, 1524 Morgridge Hall\nInstructor & Office Hours: Sameer Deshpande (sameer.deshpande@wisc.edu). Office Hours TBA."
  },
  {
    "objectID": "guides.html",
    "href": "guides.html",
    "title": "Guides",
    "section": "",
    "text": "In this section, you will find pages containing additional background information about the methods and datasets introduced in Lecture. You will also find much more comprehensive code and guides for fitting the relevant models."
  },
  {
    "objectID": "lectures.html",
    "href": "lectures.html",
    "title": "Lecture Notes",
    "section": "",
    "text": "Lecture notes will be posted here."
  },
  {
    "objectID": "guides/getting_started.html",
    "href": "guides/getting_started.html",
    "title": "Getting Started with R & RStudio",
    "section": "",
    "text": "This course will make extensive use of the R programming language through the RStudio integrated development environment (IDE). Because the formal pre-requisites for this course are STAT 333 or 340, you are expected to have previous experience using the R programming language.",
    "crumbs": [
      "Getting Started with R & RStudio"
    ]
  },
  {
    "objectID": "guides/getting_started.html#installation",
    "href": "guides/getting_started.html#installation",
    "title": "Getting Started with R & RStudio",
    "section": "Installation",
    "text": "Installation\nWhile you are expected to have used R in previous courses (see warning), I strongly recommend installing the latest version of both R and RStudio at the beginning of the course. As of the time of this writing, that is R version 4.5 and RStudio version 2025.05.\nYou can download a version of R specific to for your operating system from this website.\n\nPackage re-installation\nWhenever you update your version of R, you need to re-install the packages; this is a perennial source of frustration for many R users] and some good-natured humor from others (who also manually re-installs packages after every update!)",
    "crumbs": [
      "Getting Started with R & RStudio"
    ]
  },
  {
    "objectID": "guides/getting_started.html#required-packages",
    "href": "guides/getting_started.html#required-packages",
    "title": "Getting Started with R & RStudio",
    "section": "Required Packages",
    "text": "Required Packages\nThroughout the course, we will make extensive use of several packages in the tidyverse, primarily for data loading, pre-processing, and manipulation. We will also make extensive use of the packages glmnet, ranger, and xgboost for model fitting. We will occassionally also use ggplot2 for creating visualizations.\nAs the course progresses, we will introduce and install new package as required. For the most part, these packages will be specific to a particular sport (e.g., in Lecture 1 we will use the nbastatR to access NBA player box-score statistics).\nEvery package that we will use in this class is available through either (i) the Comprehensive R Archive Network (CRAN) or (ii) a public GitHub repository maintained by the packager developer. We typically install CRAN packages using the install.packages() command. To install packages hosted on GitHub, we will use the install_github function in the devtools package (which itself is available on CRAN)\n\n\n\n\n\n\nRequired installations\n\n\n\nPrior to Lecture 2, please make sure you have installed the tidyverse packages as well as devtools, ggplot2, glmnet, ranger, and xgboost.\n\ninstall.packages(c(\"devtools\", \"tidyverse\", \"ggplot2\", \n                   \"glmnet\", \"ranger\", \"xgboost\"))",
    "crumbs": [
      "Getting Started with R & RStudio"
    ]
  }
]