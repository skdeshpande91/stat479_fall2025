[
  {
    "objectID": "lectures/lecture1.html",
    "href": "lectures/lecture1.html",
    "title": "Lecture 1: Boxscore Metrics",
    "section": "",
    "text": "Who is the best shooter in the NBA?\nHow do we determine this using data? \n\n\nWhile they may be predictive, box score metrics are primarily retrospective: they tell (part of) the story of what happened.\n\n\n\nIn this lecture, we will practice using functions from the tidyverse suite of packages (especially dplyr) to manipulate tables of NBA box score data. Hopefully, much of the functionality we encounter in this lecture will be familiar to you. But, if you need a high-level refresher, I highly recommend the following resources:\n\nChapter 3 and Chapter 5 of R for Data Science.\nSection 1.9 and Chapter 3 of *Data Science: A First Introduction.\n\nWe will use\n\n\n\n\n\n\nSystem setup\n\n\n\n\n\nFor this lecture, we will use a new R package to scrape NBA boxscore data. In order to do this, it is critical that you have already installed the devtools package, as noted in the Getting Started guide. To check that you have successfully installed the package, run the following code.\n\nif(!\"devtools\" %in% rownames(installed.packages())){\n  stop(\"devtools not installed\")\n}",
    "crumbs": [
      "Lecture 1: Boxscore Metrics"
    ]
  },
  {
    "objectID": "lectures/lecture1.html#overview",
    "href": "lectures/lecture1.html#overview",
    "title": "Lecture 1: Boxscore Metrics",
    "section": "",
    "text": "Who is the best shooter in the NBA?\nHow do we determine this using data? \n\n\nWhile they may be predictive, box score metrics are primarily retrospective: they tell (part of) the story of what happened.\n\n\n\nIn this lecture, we will practice using functions from the tidyverse suite of packages (especially dplyr) to manipulate tables of NBA box score data. Hopefully, much of the functionality we encounter in this lecture will be familiar to you. But, if you need a high-level refresher, I highly recommend the following resources:\n\nChapter 3 and Chapter 5 of R for Data Science.\nSection 1.9 and Chapter 3 of *Data Science: A First Introduction.\n\nWe will use\n\n\n\n\n\n\nSystem setup\n\n\n\n\n\nFor this lecture, we will use a new R package to scrape NBA boxscore data. In order to do this, it is critical that you have already installed the devtools package, as noted in the Getting Started guide. To check that you have successfully installed the package, run the following code.\n\nif(!\"devtools\" %in% rownames(installed.packages())){\n  stop(\"devtools not installed\")\n}",
    "crumbs": [
      "Lecture 1: Boxscore Metrics"
    ]
  },
  {
    "objectID": "lectures/lecture1.html#basic-box-score-statistics",
    "href": "lectures/lecture1.html#basic-box-score-statistics",
    "title": "Lecture 1: Boxscore Metrics",
    "section": "Basic box score statistics",
    "text": "Basic box score statistics\n\nScraping and wrangling box score data\nWe will scrape NBA box score data using the hoopR package. We start by installing the package.\n\nif(!\"hoopR\" %in% rownames(installed.packages())){\n  message(\"Package `hoopR' is not currently installed. Installing now\")\n  devtools::install_github(repo = \"sportsdataverse/hoopR\")\n}\nlibrary(tidyverse) # load the tidyverse suite of packages\n\nYou can read more about the package here. One important function is load_nba_player_box, which scrapes individual player’s box score for every game.\n\nraw_box &lt;-\n  hoopR::load_nba_player_box(seasons = 2002:(hoopR::most_recent_nba_season()))\n\nTo study shooting ability, we need to aggregate the individual game-level data into season-level totals. Conceptually, we can accomplish this by first dividing the full data table into several smaller tables, one for each combination of player and season. Then, we can sum the number of field goals, three point shots, and free throws attempted and made by each player in each of their season. This order of operations is an example of the split-apply-combine paradigm, which is implemented in dplyr using group_by.\n\n\nseason_box &lt;-\n  raw_box %&gt;%\n  select(season, season_type, \n         athlete_display_name,\n         minutes, \n         field_goals_made, field_goals_attempted,\n         three_point_field_goals_made, three_point_field_goals_attempted,\n         free_throws_made, free_throws_attempted,\n         did_not_play) %&gt;%\n  rename(\n    Player = athlete_display_name,\n    FGM = field_goals_made,\n    FGA = field_goals_attempted,\n    TPM = three_point_field_goals_made,\n    TPA = three_point_field_goals_attempted,\n    FTM = free_throws_made, \n    FTA = free_throws_attempted) %&gt;%\n  filter(!did_not_play) %&gt;%\n  filter(season_type == 2) %&gt;%\n  filter(!(is.na(FGA) & is.na(TPA) & is.na(FTA))) %&gt;% # filter out missing data records\n  group_by(Player, season) %&gt;%\n  summarise(\n    FGM = sum(FTM),\n    FGA = sum(FGA),\n    TPM = sum(TPM),\n    TPA = sum(TPA),\n    FTM = sum(FTM),\n    FTA = sum(FTA),\n    minutes = sum(minutes),\n    n_games = n(),\n    .groups = \"drop\") %&gt;%\n  filter(FGM &lt;= FGA)\n\nWe have data for 11766 player-seasons across 2403 players. Here is a quick snapshot of the data for one player.\n\nseason_box %&gt;%\n  filter(Player == \"Dirk Nowitzki\")\n\n# A tibble: 18 × 10\n   Player        season   FGM   FGA   TPM   TPA   FTM   FTA minutes n_games\n   &lt;chr&gt;          &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt;   &lt;dbl&gt;   &lt;int&gt;\n 1 Dirk Nowitzki   2002   440  1258   139   350   440   516    2891      76\n 2 Dirk Nowitzki   2003   483  1489   148   390   483   548    3117      80\n 3 Dirk Nowitzki   2004   371  1310    99   290   371   423    2915      77\n 4 Dirk Nowitzki   2005   615  1445    91   228   615   708    3020      78\n 5 Dirk Nowitzki   2006   539  1564   110   271   539   598    3086      81\n 6 Dirk Nowitzki   2007   498  1341    72   173   498   551    2819      78\n 7 Dirk Nowitzki   2008   478  1314    79   220   478   544    2769      77\n 8 Dirk Nowitzki   2009   485  1616    61   170   485   545    3051      81\n 9 Dirk Nowitzki   2010   536  1496    51   121   536   586    3041      81\n10 Dirk Nowitzki   2011   395  1179    66   168   395   443    2505      73\n11 Dirk Nowitzki   2012   318  1034    78   212   318   355    2078      62\n12 Dirk Nowitzki   2013   164   707    63   151   164   191    1628      52\n13 Dirk Nowitzki   2014   338  1275   131   330   338   376    2633      81\n14 Dirk Nowitzki   2015   255  1067   105   276   255   289    2297      78\n15 Dirk Nowitzki   2016   250  1112   126   342   250   280    2362      75\n16 Dirk Nowitzki   2017    98   678    79   209    98   112    1421      54\n17 Dirk Nowitzki   2018    97   758   138   337    97   108    1901      77\n18 Dirk Nowitzki   2019    39   379    67   208    39    50     798      52\n\n\n\n\nFrom totals to percentages\nOne way to define the best shooter is to identify the player who made the most shots. We can identify this by arranging our data table in descending order.\n\nseason_box %&gt;%\n  arrange(desc(FGM))\n\n# A tibble: 11,766 × 10\n   Player            season   FGM   FGA   TPM   TPA   FTM   FTA minutes n_games\n   &lt;chr&gt;              &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt;   &lt;dbl&gt;   &lt;int&gt;\n 1 Kevin Durant        2010   756  1668   128   351   756   840    3241      82\n 2 James Harden        2019   754  1922   382  1041   754   858    2896      79\n 3 James Harden        2017   746  1542   266   765   746   881    2985      82\n 4 James Harden        2016   720  1631   243   669   720   837    3142      83\n 5 James Harden        2015   715  1486   215   567   715   824    3006      82\n 6 Russell Westbrook   2017   712  1967   207   596   712   842    2822      82\n 7 Kevin Durant        2014   707  1715   198   508   707   809    3153      82\n 8 James Harden        2020   694  1523   302   852   694   804    2496      69\n 9 Kobe Bryant         2006   675  2109   179   506   675   788    3184      78\n10 James Harden        2013   674  1350   182   494   674   792    3006      79\n# ℹ 11,756 more rows\n\n\n\nTo make this more precise, we can compute the field goal percentage (and similarly for three pointers and free throws).\n\nseason_box &lt;-\n  season_box %&gt;%\n  mutate(\n    FGP = ifelse(FGA &gt; 0, FGM/FGA, NA_real_),\n    TPP = ifelse(TPA &gt; 0, TPM/TPA, NA_real_),\n    FTP = ifelse(FTA &gt; 0, FTM/FTA, NA_real_))\n\n\nseason_box %&gt;% \n  arrange(desc(FGP)) %&gt;%\n  select(Player, season, FGP)\n\n# A tibble: 11,766 × 3\n   Player             season   FGP\n   &lt;chr&gt;               &lt;int&gt; &lt;dbl&gt;\n 1 Alvin Williams       2007     1\n 2 Andris Biedrins      2014     1\n 3 Chandler Hutchison   2022     1\n 4 Chuck Hayes          2016     1\n 5 Daishen Nix          2025     1\n 6 Dajuan Wagner        2007     1\n 7 Ike Diogu            2012     1\n 8 Jared Harper         2021     1\n 9 Jarnell Stokes       2017     1\n10 Jelani McCoy         2008     1\n# ℹ 11,756 more rows\n\n\nSorting the players by their \\(\\textrm{FGP},\\) we find that several players made 100% of their field goals. But very few of these players are immediately recognizable — and, indeed, none of them have been in the MVP conversation, despite the fact that they made all their shots!\nTo understand what’s going on, let’s take a look at the number of attempts and the number of games played.\n\nseason_box %&gt;% \n  arrange(desc(FGP)) %&gt;%\n  select(Player, season, FGP, n_games, FGA)\n\n# A tibble: 11,766 × 5\n   Player             season   FGP n_games   FGA\n   &lt;chr&gt;               &lt;int&gt; &lt;dbl&gt;   &lt;int&gt; &lt;int&gt;\n 1 Alvin Williams       2007     1       2     2\n 2 Andris Biedrins      2014     1       6     1\n 3 Chandler Hutchison   2022     1       6     2\n 4 Chuck Hayes          2016     1       2     2\n 5 Daishen Nix          2025     1       3     1\n 6 Dajuan Wagner        2007     1       1     1\n 7 Ike Diogu            2012     1       2     2\n 8 Jared Harper         2021     1       8     3\n 9 Jarnell Stokes       2017     1       2     1\n10 Jelani McCoy         2008     1       6     1\n# ℹ 11,756 more rows\n\n\nTaking a closer look, we see that the players with the exceptionally high field goal percentages took very few shots. To claim that any of these player-seasons are among the best ever would strain credulity. So, in order to determine the best shooting performance, we will need to limit our data to players who took a minimum number of shots.\n\n\n\n\n\n\nSetting thresholds\n\n\n\nThe interpretation of our downstream results can be quite sensitive to the choice of threshold. If we set a very low threshold, our analysis will involve many players, including those with very limited playing time. Since we do not believe these players would be among the best shooters — otherwise, they would have received more playing time! — we may instead consider a larger, more restrictive threshold (e.g. \\(\\textrm{FGM} &gt; 1500\\)). If the threshold is too high, however, we may limit our analysis to just a small handful of players and risk overlooking impressive performances.\nBecause there is no single correct way to set a threshold, it is vitally important that you clearly explain and justify whatever choice you make.\n\n\n\nFor simplicity, we will restrict our attention to those players who attempted at least 100 field goals.\n\nseason_box %&gt;%\n  filter(FGA &gt;= 100) %&gt;%\n  arrange(desc(FGP))\n\n# A tibble: 8,847 × 13\n   Player       season   FGM   FGA   TPM   TPA   FTM   FTA minutes n_games   FGP\n   &lt;chr&gt;         &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt;   &lt;dbl&gt;   &lt;int&gt; &lt;dbl&gt;\n 1 Chris Ander…   2010   164   251     0     3   164   236    1693      76 0.653\n 2 Tyler Hansb…   2014   126   196     0     2   126   185     981      64 0.643\n 3 Corey Magge…   2007   519   808    13    65   519   633    2295      75 0.642\n 4 Jarron Coll…   2004   188   295     0     1   188   262    1732      81 0.637\n 5 Chris Ander…   2011    86   137     0     1    86   135     728      45 0.628\n 6 Shelden Wil…   2010    75   121     0     1    75    98     597      54 0.620\n 7 Tyson Chand…   2012   217   355     0     2   217   315    2063      62 0.611\n 8 Tyson Chand…   2010   115   190     0     0   115   157    1165      51 0.605\n 9 Leon Powe      2007   106   177     0     2   106   144     723      59 0.599\n10 Dwight Powe…   2024    63   106     1     3    63    89     836      63 0.594\n# ℹ 8,837 more rows\n# ℹ 2 more variables: TPP &lt;dbl&gt;, FTP &lt;dbl&gt;\n\n\nThe vast majority of these players are centers and forwards. Many of them do not attempt three point shots!\nWhat if we restrict our attention players who took at least 100 shots over the course of a season and took at least 50 three point shots?\n\nseason_box %&gt;%\n  filter(FGA &gt;= 100 & TPA &gt;= 50) %&gt;%\n  arrange(desc(FGP), desc(TPP)) %&gt;%\n  select(Player, season, FGP, TPP, FGA, TPA, n_games)\n\n# A tibble: 5,985 × 7\n   Player           season   FGP   TPP   FGA   TPA n_games\n   &lt;chr&gt;             &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt;   &lt;int&gt;\n 1 Corey Maggette     2007 0.642 0.2     808    65      75\n 2 Jimmy Butler III   2020 0.576 0.244   760   119      59\n 3 Corey Maggette     2005 0.571 0.304   986   168      66\n 4 Corey Maggette     2006 0.565 0.338   375    71      32\n 5 Kevin Martin       2009 0.564 0.415   811   277      51\n 6 Corey Maggette     2008 0.553 0.384  1000   203      70\n 7 Jimmy Butler III   2025 0.553 0.308   597   104      55\n 8 Kevin Martin       2008 0.549 0.402   914   266      61\n 9 Corey Maggette     2009 0.539 0.253   634    95      51\n10 Danilo Gallinari   2016 0.536 0.364   700   239      53\n# ℹ 5,975 more rows",
    "crumbs": [
      "Lecture 1: Boxscore Metrics"
    ]
  },
  {
    "objectID": "lectures/lecture1.html#more-nuanced-metrics",
    "href": "lectures/lecture1.html#more-nuanced-metrics",
    "title": "Lecture 1: Boxscore Metrics",
    "section": "More nuanced metrics",
    "text": "More nuanced metrics\n\nEffective Field Goal Percentage\nOne criticism of FGP is that it treats 2-point shots the same as 3-point shots. As a result, the league leader in FGP is usually a center whose shots mostly come from near the rim. Effective Field Goal Percentage (eFGP) adjusts FGP to account for the fact that a made 3-point shots is worth 50% more than a made 2-point shot. The formula for eFGP is \\[\n\\textrm{eFGP} = \\frac{\\textrm{FGM} + 0.5 \\times \\textrm{TPM}}{\\textrm{FGA}}\n\\]\nWe can create a column for in our data table using mutate\n\nseason_box \n\n# A tibble: 11,766 × 13\n   Player      season   FGM   FGA   TPM   TPA   FTM   FTA minutes n_games    FGP\n   &lt;chr&gt;        &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt;   &lt;dbl&gt;   &lt;int&gt;  &lt;dbl&gt;\n 1 A.J. Guyton   2002    22   244    46   123    22    27     607      45 0.0902\n 2 A.J. Guyton   2003     0     4     0     1     0     0       9       2 0     \n 3 A.J. Lawson   2023     2    44    10    25     2     8     109      15 0.0455\n 4 A.J. Lawson   2024    15   121    13    50    15    23     314      42 0.124 \n 5 A.J. Lawson   2025    43   190    33   101    43    63     485      26 0.226 \n 6 A.J. Price    2010    60   354    60   174    60    75     863      56 0.169 \n 7 A.J. Price    2011    54   320    41   149    54    81     799      50 0.169 \n 8 A.J. Price    2012    28   174    26    88    28    35     567      43 0.161 \n 9 A.J. Price    2013    49   413    70   200    49    62    1276      57 0.119 \n10 A.J. Price    2014     0    46     6    22     0     2      99      28 0     \n# ℹ 11,756 more rows\n# ℹ 2 more variables: TPP &lt;dbl&gt;, FTP &lt;dbl&gt;\n\n\n\n\nTrue Shooting Percentage\nBoth field goal percentage and effective field goal percentage totally ignore free throws. One metric that accounts for all field goals, three pointers, and free throws is true shooting percentage (\\(\\textrm{TSP}\\)), whose formula is given by \\[\n\\textrm{TSP} = \\frac{\\textrm{PTS}}{2 \\times \\left(\\textrm{FGA} + (0.44 \\times \\textrm{FTA})\\right)},\n\\] where \\(\\textrm{PTS} =  \\textrm{FTM} + 2 \\times \\textrm{FGM} + \\textrm{TPM}\\) is the total number of points scored.",
    "crumbs": [
      "Lecture 1: Boxscore Metrics"
    ]
  },
  {
    "objectID": "guides/plot_vertical_statsbomb.html",
    "href": "guides/plot_vertical_statsbomb.html",
    "title": "Plotting StatsBomb Data Vertically",
    "section": "",
    "text": "In Lectures 2 and 3, we built several expected goals (xg) models using data provided by StatsBomb. StatsBomb pre-processes their raw tracking data so that attacking play is oriented from left to right. I find it somewhat more aesthetically pleasing to visualize shot data vertically with the goal line on top and the half-line at the bottom.\nThis page defines a function to transform StatsBomb shot location data so that it can be plotted vertically instead of horizontally. As you continue to work with StatsBomb data, feel free to use these functions",
    "crumbs": [
      "Plotting StatsBomb Data Vertically"
    ]
  },
  {
    "objectID": "guides/plot_vertical_statsbomb.html#overview",
    "href": "guides/plot_vertical_statsbomb.html#overview",
    "title": "Plotting StatsBomb Data Vertically",
    "section": "",
    "text": "In Lectures 2 and 3, we built several expected goals (xg) models using data provided by StatsBomb. StatsBomb pre-processes their raw tracking data so that attacking play is oriented from left to right. I find it somewhat more aesthetically pleasing to visualize shot data vertically with the goal line on top and the half-line at the bottom.\nThis page defines a function to transform StatsBomb shot location data so that it can be plotted vertically instead of horizontally. As you continue to work with StatsBomb data, feel free to use these functions",
    "crumbs": [
      "Plotting StatsBomb Data Vertically"
    ]
  },
  {
    "objectID": "guides/plot_vertical_statsbomb.html#changing-coordinates",
    "href": "guides/plot_vertical_statsbomb.html#changing-coordinates",
    "title": "Plotting StatsBomb Data Vertically",
    "section": "Changing Coordinates",
    "text": "Changing Coordinates\nStatsBomb preprocesses their raw location data to a standardized pitch of dimensions 120m x 80m. Appendix 2 of their Open Data Specification document shows this pitch along with several landmarks like the penalty area and goalkeeper’s box.\n\n\n\nStatsBomb Coordinate System\n\n\nSomewhat counter-intuitively, the StatsBomb coordinates system places the origin in the upper left corner so that the \\(x\\) coordinate increases as you move from left to right and the \\(y\\) coordinate increases as you move from top to bottom. R graphics, by constrast, use a coordinate system in which the \\(x\\) coordinate increases as you move from left to right and the \\(y\\) coordinate increases as you move from bottom to top. For our purposes, we will stick to the R coordinate system. To convert from the StatsBomb coordinate system to the R coordinate system, we first multiply every StatsBomb \\(y\\) coordinate by -1. We then add 80 so that the origin is now located in the lower-left corner of the pitch.\nTo illustrate this transformation, we will manually convert the locations of several landmarks on the pitch. In the code, we use the prefix sb_ to indicate that point is in the StatsBomb coordinate system\n\nsb_bot_left_corner &lt;- c(0,80)\nsb_top_left_corner &lt;- c(0,0)\nsb_bot_right_corner &lt;- c(120,80)\nsb_top_right_corner &lt;- c(120,0)\n\nsb_half &lt;- c(60,40)\n# corners of penalty area on the left \nsb_bot_left_pen_l &lt;- c(0, 62) # left penalty area\nsb_top_left_pen_l &lt;- c(0, 18) # left penalty area\nsb_bot_right_pen_l &lt;- c(18,62) # left penalty area\nsb_top_right_pen_l &lt;- c(18,18) # left penalty area\n\nbot_left_corner &lt;- sb_bot_left_corner * c(1,-1) + c(0, 80)\ntop_left_corner &lt;- sb_top_left_corner * c(1,-1) + c(0, 80)\nbot_right_corner &lt;- sb_bot_right_corner * c(1,-1) + c(0,80)\ntop_right_corner &lt;- sb_top_right_corner * c(1,-1) + c(0, 80)\n\nhalf &lt;- sb_half * c(1,-1) + c(0, 80)\nbot_left_pen_l &lt;- sb_bot_left_pen_l * c(1,-1) + c(0,80)\ntop_left_pen_l &lt;- sb_top_left_pen_l * c(1,-1) + c(0,80)\nbot_right_pen_l &lt;- sb_bot_right_pen_l * c(1,-1) + c(0,80)\ntop_right_pen_l &lt;- sb_top_right_pen_l * c(1,-1) + c(0,80)\n\nThus, the point \\((x_{s}, y_{s})\\) in the StatsBomb coordinate system maps to the point \\((x_{r}, y_{r}) = (x_{s}, 80-y_{s})\\) in the R coordinate system.\n\n\nCode\npar(mar = c(3,1,3,1), mgp = c(1.8, 0.5, 0))",
    "crumbs": [
      "Plotting StatsBomb Data Vertically"
    ]
  },
  {
    "objectID": "guides/plot_vertical_statsbomb.html#translating-and-rotating",
    "href": "guides/plot_vertical_statsbomb.html#translating-and-rotating",
    "title": "Plotting StatsBomb Data Vertically",
    "section": "Translating and Rotating",
    "text": "Translating and Rotating\nNow that we are using the familiar R coordinate system, we are going to rotate our landmarks (i.e., the center circle and the penalty area) Practically, we will (i) translate everything so that the center circle is now the origin and (ii) rotate all coordinates 90 degrees counter clockwise. The first translation transform the point \\((x,y) \\rightarrow (x-60, y-40)\\) while a 90 degree counter clockwise rotation maps \\((x,y)\\rightarrow (y,-x).\\) Composing these two steps, we need to transform points in the R coordinate system as \\[\n(x_{r}, y_{r}) \\rightarrow (y_{r}-40, 60-x_{r}).\n\\]",
    "crumbs": [
      "Plotting StatsBomb Data Vertically"
    ]
  },
  {
    "objectID": "guides/plot_vertical_statsbomb.html#putting-it-all-together",
    "href": "guides/plot_vertical_statsbomb.html#putting-it-all-together",
    "title": "Plotting StatsBomb Data Vertically",
    "section": "Putting it all together",
    "text": "Putting it all together\nWe’re now in a position to write a function that maps a point \\((x_{s}, y_{s})\\) in the StatsBomb coordinate system into the R coordinate system, translate the pitch so that the origin is at the center circle, and then rotates everything 90 degrees counterclockwise. Mathematically the transformation is \\[\n(x_{s}, y_{s}) \\rightarrow (40-y_{s}, 60-x_{s})\n\\]",
    "crumbs": [
      "Plotting StatsBomb Data Vertically"
    ]
  },
  {
    "objectID": "lectures.html",
    "href": "lectures.html",
    "title": "Lecture Notes",
    "section": "",
    "text": "Lecture notes will be posted here."
  },
  {
    "objectID": "guides.html",
    "href": "guides.html",
    "title": "Guides",
    "section": "",
    "text": "In this section, you will find pages containing additional background information about the methods and datasets introduced in Lecture. You will also find much more comprehensive code and guides for fitting the relevant models."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "STAT 479 (Fall 2025): Sports Analytics",
    "section": "",
    "text": "Welcome to STAT 479 (Special Topics in Statistics)! This iteration of the course will focus on sports analytics.\nLectures notes, instructions for the course project, and additional tutorials and exercises will be posted to this website. So, please bookmark this page and check it regularly throughout the course."
  },
  {
    "objectID": "index.html#course-information",
    "href": "index.html#course-information",
    "title": "STAT 479 (Fall 2025): Sports Analytics",
    "section": "Course information",
    "text": "Course information\nDescription: Illustrates the use of statistical modeling and data science techniques to derive actionable insights from sports data. Emphasizes not only technical calculation of advanced metrics but also on written and oral communication to other data scientists and to non-technical audience. Topics may include: deriving team rankings from paired competitions; measuring an individual player’s contribution to their team’s overall success; assessing player performance and team strategy in terms of expected outcomes; forecasting the impact of new rule changes using simulation; and creating new metrics using high-resolution player tracking data.\nLearning Outcomes: Throughout the course you will\n\nImplement appropriate statistical methods to assess player and team performance\nWork with play-by-play and high-resolution tracking data\nProvide constructive and actionable feedback on your peers’ analytic reports\nBuild a personal portfolio of sports data analyses\n\nLocation & Schedule: Tuesdays & Thursdays, 11:00am-12:15pm, 1524 Morgridge Hall\nInstructor & Office Hours: Sameer Deshpande (sameer.deshpande@wisc.edu). Office Hours TBA."
  },
  {
    "objectID": "exercises.html",
    "href": "exercises.html",
    "title": "Exercises",
    "section": "",
    "text": "Contains additional exercises to reproduce and extend analyses shown in lecture."
  },
  {
    "objectID": "exercises/exercises1_boxscore.html",
    "href": "exercises/exercises1_boxscore.html",
    "title": "Constructing Advanced Metrics Using Box Score Data",
    "section": "",
    "text": "We will rely on data from the Lahman Database.\n\n\n\nif(!\"Lahman\" %in% rownames(installed.packages())){\n  message(\"Package `Lahman' not already installed. Installing now\")\n  install.packages(\"Lahman\")\n} else{\n  library(Lahman)\n}",
    "crumbs": [
      "Constructing Advanced Metrics Using Box Score Data"
    ]
  },
  {
    "objectID": "exercises/exercises1_boxscore.html#setup-installing-the-lahman-package",
    "href": "exercises/exercises1_boxscore.html#setup-installing-the-lahman-package",
    "title": "Constructing Advanced Metrics Using Box Score Data",
    "section": "",
    "text": "if(!\"Lahman\" %in% rownames(installed.packages())){\n  message(\"Package `Lahman' not already installed. Installing now\")\n  install.packages(\"Lahman\")\n} else{\n  library(Lahman)\n}",
    "crumbs": [
      "Constructing Advanced Metrics Using Box Score Data"
    ]
  },
  {
    "objectID": "guides/getting_started.html",
    "href": "guides/getting_started.html",
    "title": "Getting Started",
    "section": "",
    "text": "This course will make extensive use of the R programming language through the RStudio integrated development environment (IDE). Because the formal pre-requisites for this course are STAT 333 or 340, you are expected to have previous experience using the R programming language.\nThe course will also use version control (using git and GitHub) and Quarto for publishing the results of your analyses. This page contains information",
    "crumbs": [
      "Getting Started"
    ]
  },
  {
    "objectID": "guides/getting_started.html#computing-r-rstudio",
    "href": "guides/getting_started.html#computing-r-rstudio",
    "title": "Getting Started",
    "section": "Computing (R & RStudio)",
    "text": "Computing (R & RStudio)\n\n\n\n\n\n\nWarning\n\n\n\nI will assume fluency with basic R functionality (e.g., assignment, writing and executing scripts, saving data objects, setting environments, installing and loading packages), data manipulation with dplyr and other tidyverse packages, and visualization using either base R graphics or ggplot2. I will additionally assume some familiarity with fitting statistical models in R and interpreting their output (e.g., using lm and glm).\nIf you do not meet the formal course prerequisites and/or have not used R in a previous course, this is not the right course for you.\n\n\n\nAdditional R resources\nHaving issued that warning @prereq-warning, you will see some new R functionality in the course. As the focus is on answer sports problems, we will not spend significant classtime going over new functions, packages, or techniques. If you find that there are gaps in your R knowledge, you are expected to fill them on your own time. Here are some helpful resources\n\nR for Data Science\nData Science: A first introduction\n\n\n\nInstallation\nWhile you are expected to have used R in previous courses (see warning), I strongly recommend installing the latest version of both R and RStudio at the beginning of the course. As of the time of this writing, that is R version 4.5 and RStudio version 2025.05.\nYou can download a version of R specific to for your operating system from this website. After install R, you should download and re-install RStudio from this website.\n\n\n\n\n\n\nTip\n\n\n\nWhenever you update your version of R, you need to re-install the packages; this is a perennial source of frustration for many R users] and some good-natured humor from others (who also manually re-installs packages after every update!)\n\n\n\n\nRequired Packages\nThroughout the course, we will make extensive use of several packages in the tidyverse, primarily for data loading, pre-processing, and manipulation. We will also make extensive use of the packages glmnet, ranger, and xgboost for model fitting. We will occasionally also use ggplot2 for creating visualizations.\nAs the course progresses, we will introduce and install new package as required. For the most part, these packages will be specific to a particular sport. Every package that we will use in this class is available through either (i) the Comprehensive R Archive Network (CRAN) or (ii) a public GitHub repository maintained by the packager developer. We typically install CRAN packages using the install.packages() command. To install packages hosted on GitHub, we will use the install_github function in the devtools package (which itself is available on CRAN)\n\n\n\n\n\n\nBase packages\n\n\n\nPrior to Lecture 2, please make sure you have installed the tidyverse packages as well as devtools, ggplot2, glmnet, ranger, and xgboost.\n\ninstall.packages(c(\"devtools\", \"tidyverse\", \"ggplot2\", \"glmnet\", \"ranger\", \"xgboost\"))",
    "crumbs": [
      "Getting Started"
    ]
  },
  {
    "objectID": "guides/getting_started.html#version-control-git-github",
    "href": "guides/getting_started.html#version-control-git-github",
    "title": "Getting Started",
    "section": "Version control (Git & GitHub)",
    "text": "Version control (Git & GitHub)\n\n\nAdditional Resources",
    "crumbs": [
      "Getting Started"
    ]
  },
  {
    "objectID": "guides/getting_started.html#quarto",
    "href": "guides/getting_started.html#quarto",
    "title": "Getting Started",
    "section": "Quarto",
    "text": "Quarto\n\nInstallation\n\n\nPublishing",
    "crumbs": [
      "Getting Started"
    ]
  }
]