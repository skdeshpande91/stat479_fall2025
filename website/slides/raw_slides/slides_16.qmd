---
title: "STAT 479 Lecture 16"
subtitle: "Plackett-Luce Models"
format: revealjs
execute:
  cache: true
---

## Motivation: NFL Mock Drafts
- Projection for which players taken in what order
- Huge industry of fans & media releasing mock drafts regularly

. . . 

- Can we derive any "wisdom from the crowd" to assess prospects?
  - [CBS](https://www.cbssports.com/nfl/draft/news/2026-nfl-mock-draft-jets-raiders-take-qbs-strong-wr-defensive-classes) vs [Draft Network](https://www.thedraftnetwork.com/2025/10/26/nfl-mock-draft-2026-october-26)
  - Consensus "big board" (i.e., overall ranking of players)

- $\mathbb{P}(\textrm{available at pick 11} \vert \textrm{not taken in top-3})$?


## Setup
- $p$ items (indexed by $j = 1, \ldots, p$)
- $n$ raters (indexed by $i = 1, \ldots n$)
- Each rater will report a *rank ordering* of their **top** $n_{i}$ items
- Observations: $i(1) \succ i(2) \succ \ldots \succ i(n_{i})$
- $i(k)$: index of item that rater $i$ ranked $k$-th overall
- Raters may rank $n_{i} < p$ items

## Synthetic Data Example

- 4 items ($A$, $B$, $C$, and $D$) & 6 raters

  * Rater 1: $A \succ B \succ D \succ C$
  * Rater 2: $B \succ A$ 
  * Rater 3: $A \succ D \succ C$
  * Rater 4: $B \succ D \succ C$
  * Rater 5: $A \succ B \succ D \succ C$
  * Rater 6: $A \succ D \succ C$
  
- Can we deduce a global ranking? 

## A Generative Model

- Rater $i$ first decides how many items to rank (i.e., draw $n_{i}$)
- Rater $i$ sequentially selects items  **without replacement**
  - Each step, pick one item from **available options**
  - First item selected is $i(1)$, second item selected is $i(2) \ldots$
  - Stops after selecting $i(n_{i})$

## Generative Example I
- Rater 1: $A \succ B \succ D \succ C.$
- Decides to rank all 4 items
- First step: draws $A$ from available items $\{A, B, C, D\}.$
- Second step: draws $B$ from $\{B, C, D\},$
- Third step: draws $D$ from $\{C,D\}.$
- Fourth step: draws $C$ from $\{C\}$

## Generative Example II
- Rater 2: $B \succ A$
- Decides to rank only 2 items
- First step: draws $B$ from $\{A,B,C,D\}$
- Second step: draws $A$ from $\{A, C, D\}$


## Plackett-Luce Model
- Item $j$ has latent parameter $\lambda_{j}$ ("desirability")
$$
\mathbb{P}(\textrm{select } j \textrm{ from } \mathcal{S}) = 
\begin{cases}
\frac{e^{\lambda_{j}}}{\sum_{s \in \mathcal{S}}{e^{\lambda_{s}}}} & \textrm{if } j \in \mathcal{S} \\
0 & \textrm{otherwise}.
\end{cases}
$$
- Bradley-Terry: special case where $\mathcal{S}$ contains 2 items

## Example I
- Rater 1: $A \succ B \succ D \succ C$
- First select $A$ from $\mathcal{S} = \{A, B, C, D\}$
$$\mathbb{P}(\textrm{select } A) = \frac{e^{\lambda_{A}}}{e^{\lambda_{A}} + e^{\lambda_{B}} + e^{\lambda_{C}} + e^{\lambda_{D}}}$$

. . .

- Then select $B$ from $\mathcal{S} = \{B, C, D\}$
$$
\mathbb{P}(\textrm{select } B \vert \textrm{selected } A) = \frac{e^{\lambda_{B}}}{e^{\lambda_{B}} + e^{\lambda_{C}} + e^{\lambda_{D}}}
$$

## Example (cont'd)

- Then select $B$ from $\mathcal{S} = \{B, C, D\}$
$$
\mathbb{P}(\textrm{select } D \vert \textrm{selected } A, B) = \frac{e^{\lambda_{D}}}{e^{\lambda_{C}} + e^{\lambda_{D}}}
$$

. . . 

- Can multiply these probabilities to obtain
$$
\begin{align*}
\mathbb{P}(A \succ B \succ D \succ C) &= \frac{e^{\lambda_{A}}}{e^{\lambda_{A}} + e^{\lambda_{B}} + e^{\lambda_{C}} + e^{\lambda_{D}}} \\
~ &\times \frac{e^{\lambda_{B}}}{e^{\lambda_{B}} + e^{\lambda_{C}} + e^{\lambda_{D}}}\times \frac{e^{\lambda_{D}}}{e^{\lambda_{C}} + e^{\lambda_{D}}}
\end{align*}
$$


## Fitting Plackett-Luce Models in R

- [**PlacketLuce**](https://cran.r-project.org/web/packages/PlackettLuce/index.html) available on CRAN

```{r}
#| label: install-pl
#| eval: false
#| echo: true
install.packages("PlackettLuce")
```

- Like **BradleyTerry2**, syntax is a bit idiosyncratic
- Data must be formatted as `ranking` object

## Ranking Matrix I

- Encode $n$ rankings of $p$ items in an $n \times p$ matrix $\boldsymbol{\mathbf{R}}$
- $r_{ij} = k$: rater $i$ ranks item $j$ $k$-th overall
- $r_{ij}$ is `NA` if rather $i$ does not rank item $j$

. . . 

- Rater 1 ($A \succ B \succ D \succ C$) and Rater 4 ($B \succ D \succ C$)
  - $r_{1,A} = 1$, $r_{1,B} = 2$, $r_{1,D} = 3$ and $r_{1,C} = 4$
  - $r_{4,B} = 1,$ $r_{4,D} = 2,$ and $r_{4,C} = 3$. $r_{1,A}$ is `NA`

## Creating a `ranking` object

:::{.panel-tabset}

### Creating $\boldsymbol{\mathbf{R}}$

```{r}
#| label: example-R
#| eval: true
#| echo: true
R <- matrix(
  c(1,2,4,3,
    2, 1, NA, NA,
    1, NA, 3, 2,
    NA, 1, 3, 2,
    1, 2, 4, 3,
    1, NA, 3, 2),
  nrow = 6, ncol = 4, dimnames = list(c(), c("A", "B", "C", "D")),
  byrow = TRUE)
R
```

### Using `as.rankings()`

```{r}
#| label: convert-R
#| eval: true
#| echo: true
R_rank <- PlackettLuce::as.rankings(R)
R_rank
```

:::

## Estimating Plackett-Luce Parameters

```{r}
#| label: fit-4
#| eval: true
#| echo: true

fit <- PlackettLuce::PlackettLuce(rankings = R_rank)
lambda_hat <- coef(fit)
lambda_hat

```


## Estimating $\mathbb{P}(A \succ B \succ D \succ C)$ I {.smaller}

- Rater 1 must first select $A$, then $B,$ then $D$

$$
\begin{align*}
\mathbb{P}(\textrm{select } A) &= \frac{e^{\lambda_{A}}}{e^{\lambda_{A}} + e^{\lambda_{B}} + e^{\lambda_{C}} + e^{\lambda_{D}}} \\
\mathbb{P}(\textrm{select } B \vert \textrm{selected } A) &= \frac{e^{\lambda_{B}}}{e^{\lambda_{B}} + e^{\lambda_{C}} + e^{\lambda_{D}}} \\
\mathbb{P}(\textrm{select } D \vert \textrm{selected } A, B) &= \frac{e^{\lambda_{D}}}{e^{\lambda_{C}} + e^{\lambda_{D}}}
\end{align*}
$$

## Estimating $\mathbb{P}(A \succ B \succ D \succ C)$ II

```{r}
#| label: example-prob
#| eval: true
#| echo: true

pA <- exp(lambda_hat["A"])/sum(exp(lambda_hat[c("A", "B", "C", "D")]))
pB <- exp(lambda_hat["B"])/sum(exp(lambda_hat[c("B", "C", "D")]))
pD <- exp(lambda_hat["D"])/sum(exp(lambda_hat[c("C", "D")]))

cat("P(A) = ", round(pA, digits = 3), "\n")
cat("P(B | A) = ", round(pB, digits = 3), "\n")
cat("P(D | A,B) = ", round(pD, digits = 3), "\n")
cat("P(A > B > D > C) = ", round(pA * pB * pD, digits = 3))
```

## Example: Beyond Ranking Probabilities

- $\mathbb{P}(B \textrm{ selected second})$
- $\mathbb{P}(B \textrm{ selected second} \vert A \textrm{ selected first})$

. . . 

```{r}
#| label: prob-B-second
#| eval: true
#| echo: true
pA <- exp(lambda_hat["A"])/sum(exp(lambda_hat[c("A", "B", "C", "D")]))
pAB <- exp(lambda_hat["A"])/sum(exp(lambda_hat[c("A", "B", "C", "D")])) * exp(lambda_hat["B"])/sum(exp(lambda_hat[c("B", "C", "D")]))
pCB <- exp(lambda_hat["C"])/sum(exp(lambda_hat[c("A", "B", "C", "D")])) * exp(lambda_hat["B"])/sum(exp(lambda_hat[c("A", "B", "D")]))
pDB <- exp(lambda_hat["D"])/sum(exp(lambda_hat[c("A", "B", "C", "D")])) * exp(lambda_hat["B"])/sum(exp(lambda_hat[c("A", "B", "C")]))
cat("P(B selected second) = ",round(pAB + pCB + pDB, digits = 3), "\n")
cat("P(B selected second | A selected first) = ", round(pAB/pA, digits = 3), "\n")
```
## NFL Mock Draft Data

- CSV file `three_round_mock.csv` available on Box ([link](https://uwmadison.box.com/s/giqpnh2961djqzcfq1p1ib2orrbj8s0e))
```{r}
#| label: read-mock-data
#| eval: true
#| echo: true
#| warning: false
#| message: false
raw_data <- readr::read_csv(file = "three_round_mocks.csv")
set.seed(129)
raw_data |> dplyr::slice_sample(n = 5)
```


## Forming the Ranking Matrix

- Data is in *long* format
- Must reshape it into *wide* format

```{r}
#| label: pivot-rankings-show
#| eval: true
#| echo: false
ranking_matrix <-
  raw_data |>
  dplyr::select(site, date, name, pick, url) |> #<1>
  tidyr::pivot_wider(names_from = name,values_from = pick) |> #<2>
  dplyr::select(-tidyr::all_of(c("date", "url", "site"))) |> #<3>
  dplyr::mutate_all( ~replace(., lengths(.)==0, NA)) |> #<4>
  as.matrix() #<5>
ranking_matrix[1:5, 1:5]
```
## Estimating $\lambda_{j}$'s

```{r}
#| label: fit-nfl-pl
#| eval: true
#| echo: true
#| message: false
#| warning: false
mock_rankings <- PlackettLuce::as.rankings(x = ranking_matrix)
fit <- PlackettLuce::PlackettLuce(rankings = mock_rankings)
lambda_hat <- coef(fit)
round(sort(lambda_hat, decreasing = TRUE)[1:10], digits = 3)
```

## Softmax

- Plackett-Luce probabilities computed using **softmax**
$$
\sigma(x_{1}, \ldots, x_{n}) = \left( \frac{e^{x_{1}}}{\sum{e^{x_{i}}}}, \ldots, \frac{e^{x_{n}}}{\sum{e^{x_{i}}}}\right)
$$
- Available in R using `mclust::softmax`
- Must install **mclust**
```{r}
#| label: install-mclust
#| eval: false
#| echo: true
install.packages("mclust")
```


## Draft Simulation

- Loop over all picks in the first rounds (1--32)
- In each iteration (i.e., pick)
  - Remove previously selected players from $\mathcal{S}$
  - Estimate selection probabilities $e^{\lambda_{j}}/\sum_{j' \in \mathcal{S}}{e^{\lambda_{j'}}}$
  - Use `sample()` to select one available player
- Will maintain running list of available & selected players



## Simulating the 2nd pick
- Suppose Saquon Barkley was picked first overall
```{r}
#| label: sim-second-pick
#| eval: true
#| echo: true
players <- names(lambda_hat)
selected_players <- c("Saquon Barkley") 
available_players <- players[!players %in% selected_players] 

probs <- mclust::softmax(x = lambda_hat[available_players])
names(probs) <- available_players
sample(x = available_players, size = 1, prob = probs)
```


## Simulation

- $\mathbb{P}(\textrm{Saquon available at 11} \vert \textrm{Saquon not picked top-3})$
- Helper function determines whether player picked in top-$k$
