---
title: "Lecture 1: Boxscore Metrics"
format: html
execute: 
  cache: true
  freeze: auto
---

## Motivation: the best shooting season in the NBA?

Who is the best shooter in the NBA?
How do we determine this *using data*?
<!--
 Main questions: who is the best shooter in the NBA? 
 How might we use *data* to determine this? 
-->

In this lecture, we will practice using functions from the **tidyverse** suite of packages (especially **dplyr**) to manipulate tables of NBA box score data.
Hopefully, much of the functionality we encounter in this lecture will be familiar to you.
But, if you need a high-level refresher, I highly recommend the following resources:

  * [Chapter 3](https://r4ds.hadley.nz/data-transform.html) and [Chapter 5]() of [*R for Data Science*](https://r4ds.hadley.nz).
  * [Section 1.9](https://datasciencebook.ca/intro.html#adding-and-modifying-columns-using-mutate) and [Chapter 3](https://datasciencebook.ca/wrangling.html) of [*Data Science: A First Introduction](https://datasciencebook.ca). 

We will use the package [**hoopR**](https://hoopr.sportsdataverse.org/index.html) to scrape NBA boxscore data.
You should install the package using the code `install.packages("hoopR")`.


## Basic box score statistics

### Scraping and wrangling box score data

To get all the boxscore data, we will use the function [`load_nba_player_box`](https://hoopr.sportsdataverse.org/reference/load_nba_player_box.html)
```{r scrape-boxscores}
#| output: false
#| message: false
#| warning: false

library(tidyverse)
raw_box <-
  hoopR::load_nba_player_box(seasons = 2002:(hoopR::most_recent_nba_season()))
```

The data table `raw_box` contains `r nrow(raw_box)` rows and `r ncol(raw_box)` columns.
Checking the column names, we see that there are columns for the numbers of field goals, three point shots, and free throws made and attempted.
```{r colnames}
colnames(raw_box)
```
Notice as well that there are columns for the game date (`game_date`), game id (`game_id`), and player (e.g., `athlete_display_name`).
This suggests that each row corresponds to a unique combination of game and player and records the players individual statistics in that game.

For instance, here are the box score statistics for several players from a single game in 2011.
```{r snapshot}
raw_box |>
  filter(game_date == "2011-06-12") |>
  select(athlete_display_name, 
         field_goals_made, field_goals_attempted,
         three_point_field_goals_made, three_point_field_goals_attempted,
         free_throws_made, free_throws_attempted)
```
As a sanity check, we can cross-reference the data in our table with the [box score from ESPN](https://www.espn.com/nba/boxscore/_/gameId/310612014).
Luckily, these numbers match up!

It turns out that `raw_box` contains much more data than we need.
Specifically, it includes statistics from play-in and play-off games as well as data from some (but not all) All-Star games.
Since we're ultimately interested in identifying the best player-seasons in terms of shooting performance, we need to remove all play-off, play-in, and All-Star games from the dataset.
Additionally, the column `did_not_play` contains a Boolean (i.e., logical) variable that is `TRUE` is the player did not play in the game and is `FALSE` if the player did not play in the game

```{r reg}
allstar_dates <-
  lubridate::date(c("2002-02-10", "2003-02-09", "2004-02-15",
    "2005-02-20", "2006-02-19", "2007-02-18", 
    "2008-02-17", "2009-02-15", "2010-02-14",
    "2011-02-20", "2012-02-26", "2013-02-17", 
    "2014-02-16", "2015-02-15", "2016-02-14",
    "2017-02-19", "2018-02-18", "2019-02-17",
    "2020-02-16", "2021-03-07", "2022-02-20",
    "2023-02-19", "2024-02-18", "2025-02-16"))
reg_box <-
  raw_box |>
  filter(season_type == 2 & !did_not_play & !game_date %in% allstar_dates)
```


Looking at the data table `reg_box`, we see that in about `r round(mean(is.na(reg_box$minutes))*100, digits = 1)`% of rows, the number of minutes played is missing.
These likely correspond to players who were active but did not play or logged only a few seconds (generally at the end of games).
We will replace these NA values with 0's and, while doing so, rename some of the columns in `reg_box`.
```{r replace_na}
reg_box <-
  reg_box |>
  rename(                                       # <1>
    Player = athlete_display_name,
    FGM = field_goals_made,
    FGA = field_goals_attempted,
    TPM = three_point_field_goals_made,
    TPA = three_point_field_goals_attempted,
    FTM = free_throws_made, 
    FTA = free_throws_attempted) |>
  mutate(FGM = ifelse(is.na(minutes), 0, FGM), # <2>
         FGA = ifelse(is.na(minutes), 0, FGA),
         TPM = ifelse(is.na(minutes), 0, TPM),
         TPA = ifelse(is.na(minutes), 0, TPA),
         FTM = ifelse(is.na(minutes), 0, FTM),
         FTA = ifelse(is.na(minutes), 0, FTA)) |>
  replace_na(list(minutes = 0))                # <3>  
```
1. Rename several variables 
2. For those rows where `minutes` is NA, set the numbers of makes and attempts to 0
3. Replace missing `minutes` values with 0

At this point, every row of `reg_box` corresponds to a player-game combination.
We ultimately wish to sum up the number of makes and misses of each shot type across an entire season for each player.
To illustrate this, let's focus on Dirk Nowitzki's performance in the 2006-07 season when he won the league MVP award.
Conceptually, we can accomplish this by first dividing the full data table into several smaller tables, one for each combination of player and season.
Then, we can sum the number of field goals, three point shots, and free throws attempted and made by each player in each of their season.
This is an example of the *split-apply-combine* strategy in which you "break up a big problem into manageable pieces, operate on each piece independently, and then put all the pieces back together." [@Wickham2011_split_apply_combine].
This functionality is implemented in **dplyr** using [`group_by()`](https://dplyr.tidyverse.org/reference/group_by.html)

```{r get-season-totals}
season_box <-
  reg_box |>
  group_by(Player, season) %>%
  summarise(
    FGM = sum(FGM),
    FGA = sum(FGA),
    TPM = sum(TPM),
    TPA = sum(TPA),
    FTM = sum(FTM),
    FTA = sum(FTA),
    minutes = sum(minutes),
    n_games = n(),
    .groups = "drop")
```

The data table `season_box` contains `{r} nrow(season_box)` rows, each of corresponds to a single player-season combination.
Here is a quick snapshot of some of the data for Dirk Nowitzki
```{r view-dirk}
season_box |>
  filter(Player == "Dirk Nowitzki") |>
  select(season, FGM, FGA, TPM, TPA, FTM, FTA)
```

## From totals to percentages

In order to determine which player-season was the best in terms of shooting, we need to first define "best".
Perhaps the simplest definition is to find the player-season with the most made shots.
We can identify this player-season by sorting the data in `season_box` by `FGM` in descending order with the [`arrange()`](https://dplyr.tidyverse.org/reference/arrange.html) function
```{r arrange-fgm}
season_box %>%
  arrange(desc(FGM))
```
When we look at the ten "best" shooting seasons, we immediately recognize a lot of superstar players!
On this basis, we might be satisfied evaluating shooting performances based only on the *total* number of shots.
But taking a closer look, should we really consider Kobe Bryant's 2002-03 and Shai Gilgeous-Alexander's 2024-25 seasons to be equally impressive when Kobe took attempted *242* more shots than Shai in order to make 868 shots? 
Arguably, Shai's 2024-25 season should rank higher than Kobe's 2002-03 season because Shai was more *efficient*.

This motivates us to refine our definition of "best" by focusing on the *percentage* of field goals made rather than total number of field goals made.
```{r compute-percentages}
season_box <-
  season_box |>
  mutate(FGP = ifelse(FGA > 0, FGM/FGA, NA_real_)) # <1>
season_box |> 
  arrange(desc(FGP)) |>
  select(Player, season, FGP)
```
1. For players who attempted no field goals (i.e., `FGA = 0`), their field goal percentage is undefined.

Sorting the players by their $\textrm{FGP},$ we find that several players made 100% of their field goals.
But very few of these players are immediately recognizable --- and, indeed, none of them have been in the MVP conversation, despite the fact that they made all their shots! 

To understand what's going on, let's take a look at the number of attempts.
```{r arrange-fgp-games}
season_box %>% 
  arrange(desc(FGP)) %>%
  select(Player, season, FGP, FGA)
```


Given the very low number of shots attempted in any of these player-season, claiming that any of these player-seasons are among the best ever would strain credulity!
So, in order to determine the best shooting performance, we will need to **threshold** our data to players who took a minimum number of shots.
For simplicity, let's focus our attention on those players who attempted at least 400 field goals in a season (i.e., they attempted, on average, at least 5 shots per game).

<!--
:::{#threshold-note .callout-note}
## Setting thresholds

The interpretation of our downstream results can be quite sensitive to the choice of threshold.
If we set a very low threshold, our analysis will involve many players, including those with very limited playing time.
Since we do not believe these players would be among the best shooters --- otherwise, they would have received more playing time! --- we may instead consider a larger, more restrictive threshold (e.g. $\textrm{FGM} > 1500$).
If the threshold is too high, however, we may limit our analysis to just a small handful of players and risk overlooking impressive performances. 

Because there is no single correct way to set a threshold, it is vitally important that you clearly explain and justify whatever choice you make.
:::
-->

 
<!-- idea for replacement level:
 NBA roster has 15 players, of which 12 are active. 
 For the most part, teams play 8-10 people, so let's say 10
 For each season, compute 100 * 10/12% quantile for MPG and then take the average
 across the league. This is 
-->
```{r}
season_box |>
  filter(FGA >= 400) |>
  arrange(desc(FGP)) |>
  select(Player, season, FGP,FGA)
```
Do we really believe that these performances, all of which were made centers who mostly shoot at or near the rim, represent some of the best shooting performances of all time? 




### Effective Field Goal Percentage

A major limitation of FGP is that it treats 2-point shots the same as 3-point shots. 
As a result, the league-leader in FGP every season is usually a center whose shots mostly come from near the rim.
[Effective Field Goal Percentage](https://en.wikipedia.org/wiki/Effective_field_goal_percentage) (eFGP) adjusts FGP to account for the fact that a made 3-point shots is worth 50% more than a made 2-point shot. 
The formula for eFGP is
$$
\textrm{eFGP} = \frac{\textrm{FGM} + 0.5 \times \textrm{TPM}}{\textrm{FGA}}
$$

```{r compute-efgp}
season_box <-
  season_box |>
  mutate(
    TPP = ifelse(TPA > 0, TPM/TPA,NA_real_),
    eFGP = (FGM + 0.5 * TPM)/FGA) 
season_box %>%
  filter(FGA >= 400) %>%
  arrange(desc(eFGP), desc(FGP)) %>%
  select(Player, season, eFGP, FGP, TPP, TPA, n_games)
```
We see again that some of the best seasons, according to eFGP, were from centers, many of whom attempt few few three point shots.
When filter out players who took at least 100 three point shots, we start to see other positions in the top-10.
```{r filter-efgp-tpa}
season_box %>%
  filter(FGA >= 400 & TPA >= 100) %>%
  arrange(desc(eFGP), desc(FGP)) %>%
  select(Player, season, eFGP, FGP, TPP, TPA, n_games)
```

### True Shooting Percentage

Both FGP and eFGP totally ignore free throws. 
Intuitively, we should expect the best shooter to be proficient at making two-and three-point shots as well as their free throws.
One metric that accounts for all field goals, three pointers, and free throws is [true shooting percentage](https://en.wikipedia.org/wiki/True_shooting_percentage) ($\textrm{TSP}$), whose formula is given by
$$
\textrm{TSP} = \frac{\textrm{PTS}}{2 \times \left(\textrm{FGA} + (0.44 \times \textrm{FTA})\right)},
$$
where $\textrm{PTS} =  \textrm{FTM} + 2 \times \textrm{FGM} + \textrm{TPM}$ is the total number of points scored.


```{r tsp}
season_box <-
  season_box |>
  mutate(PTS = FTM + 2 * FGM + TPM,
         TSP = PTS/(2 * (FGA + 0.44 * FTA)))
season_box %>%
  filter(FGA >= 400 & TPA >= 100) %>%
  arrange(desc(TSP), desc(eFGP), desc(FGP)) %>%
  select(Player, season, TSP, eFGP, FGP, TPP, n_games)
```

