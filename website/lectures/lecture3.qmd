---
title: "Lecture 3: Estimating the Expected Value of a Game State"
format: html
execute: 
  cache: true
---


## Overview

<!--During the [March 20, 2024 game between the Dodgers and Padres](https://www.espn.com/mlb/playbyplay/_/gameId/401568469), Shohei Ohtani singled in the top of the 3rd inning and the top of the 8th inning.

https://www.youtube.com/watch?v=wdvHcqXP5Ug

Based on the results alone, the single in the 8th inning was more valuable --- it drove in a run.

But, as we've discussed, it's not advisable to draw conclusions based only the result.
We can make much more nuanced comparisons by thinking carefully about what we **expect** to happen.
-->

Over the next several lectures, we will work with pitch-tracking data from Major League Baseball, with the ultimate goal of allocating credit or blame to players based at a play-by-play level and to quantify the value of each player provides his team.  
But before doing any of that, let's consider two hypothetical scenarios in which a batter comes up to the plate when there are (i) 2 outs and no runners on base and when there are (ii) 1 out and runners on first and second. 
Which scenario do you think will result in more runs for the batting team? 

Intuitively, we might expect the second scenario to lead to more runs; after all, the batting team will score at least one run if the batter gets a hit while there is no guarantee of scoring a run in the first scenario even if the batter gets on base.
We can more precisely quantify this intuition using **expected runs**, which is a key tool used in sabermetrics. 
The expected runs $\rho(\textrm{o}, \textrm{br})$ is the average number of runs scored in the remainder of the half-inning following at-bats beginning with $\textrm{o}$ outs and baserunner configuration $\textrm{br}.$
Like expected goals (XG) from [Lecture 2](lectures/lecture2.html), expected runs is a **conditional expectation**. 

During a  game between the Los Angeles Dodgers and San Diego Padres, Shohei Ohtani actually faced both of the scenarios mentioned above and singled in both at-bats.
By the end of this lecture, we will be able to quantify exactly how valuable each of those singles using **run values**, which combine changes in the number of a team is *expected* to score and the number of runs actually scored in an at-bat.


<!-- motivating example: Dodgers-padres, top 3, Ohtani singles to right field; there are 2 outs and nobody on; he does steal second and advances to 3rd but is left stranded; top 8, Ohtani   singled to left field, 1 out, runners on 1st and 2nd, this drove in a run!

which play was more valuable: we have to think about what might have happened if this was done over and over

-->


## Working with baseball tracking data

### History of tracking data 
<!-- historical aside about history of pitchf/x 

Statcast at 10: https://www.nytimes.com/athletic/5627303/2024/07/10/mlb-statcast-10-year-anniversary/
-->

### Accessing StatCast Data
Major League Baseball hosts a public-facing web interface for accessing StatCast data.
Using that interface, users can pull up data for individual players or about all pitches of a certain type.
Powering this website is an application programming interface (API), which allows software applications to connect to the underlying StatCast database.
It is through this API that the **baseballR** package acquires data.
If you have not yet installed that package, you can do so using the code `devtools::install_github(repo = "BillPetti/baseballr")`

The **baseballR** package provides a function [`baseballr::statcast_search()`](https://billpetti.github.io/baseballr/reference/statcast_search.html) that allows users query all StatCast data by date, player, or player type.
One of the original **baseballr** authors, Bill Petti, wrote a wrapper function that uses `baseballr::statcast_search()` to pull down an entire season's worth of pitch-by-pitch data; see [this blog post](https://billpetti.github.io/2021-04-02-build-statcast-database-rstats-version-3.0/) for more the wrapper function code and [this earlier post]() for details about its design.
Since he published his original function, StatCast has added some new fields, necessitating a few changes to the original script.
The code below defines a new scraper, which we will use in the course. 
An R script containing this code is available at [this link](https://github.com/skdeshpande91/stat479_fall2025/blob/main/scripts/annual_statcast_query.R).
At a high level, the scraping function pulls data from StatCast on a week-by-week basis. 

```{r annual-statcast-query-def}
#| code-fold: true
#| code-summary: "Show the code"
#| eval: false
annual_statcast_query <- function(season) {
  
  data_base_column_types <- 
    read_csv("https://app.box.com/shared/static/q326nuker938n2nduy81au67s2pf9a3j.csv")
  
  dates <- 
    seq.Date(as.Date(paste0(season, '-03-01')),
             as.Date(paste0(season, '-12-01')), 
             by = '4 days')
  
  date_grid <- 
    tibble::tibble(start_date = dates, 
                   end_date = dates + 3)
  
  safe_savant <- 
    purrr::safely(scrape_statcast_savant)
  
  payload <- 
    purrr::map(.x = seq_along(date_grid$start_date),
               ~{message(paste0('\nScraping week of ', date_grid$start_date[.x], '...\n'))
                 payload <- 
                   safe_savant(start_date = date_grid$start_date[.x], 
                               end_date = date_grid$end_date[.x], 
                               type = 'pitcher')
                 return(payload)
                 })
  
  payload_df <- purrr::map(payload, 'result')
  
  number_rows <- 
    purrr::map_df(.x = seq_along(payload_df),
                  ~{number_rows <- 
                    tibble::tibble(week = .x, 
                                   number_rows = length(payload_df[[.x]]$game_date))
                  }) %>%
    dplyr::filter(number_rows > 0) %>%
    dplyr::pull(week)
  
  payload_df_reduced <- payload_df[number_rows]
  
  payload_df_reduced_formatted <- 
    purrr::map(.x = seq_along(payload_df_reduced), 
               ~{cols_to_transform <- 
                 c("pitcher", "fielder_2", "fielder_3",
                   "fielder_4", "fielder_5", "fielder_6", "fielder_7",
                   "fielder_8", "fielder_9")
               df <- 
                 purrr::pluck(payload_df_reduced, .x) %>%
                 dplyr::mutate_at(.vars = cols_to_transform, as.numeric) %>%
                 dplyr::mutate_at(.vars = cols_to_transform, function(x) {ifelse(is.na(x), 999999999, x)})
               character_columns <- 
                 data_base_column_types %>%
                 dplyr::filter(class == "character") %>%
                 dplyr::pull(variable)
               numeric_columns <- 
                 data_base_column_types %>%
                 dplyr::filter(class == "numeric") %>%
                 dplyr::pull(variable)
               integer_columns <- 
                 data_base_column_types %>%
                 dplyr::filter(class == "integer") %>%
                 dplyr::pull(variable)
               df <- 
                 df %>%
                 dplyr::mutate_if(names(df) %in% character_columns, as.character) %>%
                 dplyr::mutate_if(names(df) %in% numeric_columns, as.numeric) %>%
                 dplyr::mutate_if(names(df) %in% integer_columns, as.integer)
               return(df)
               })
  
  combined <- payload_df_reduced_formatted %>%
    dplyr::bind_rows()
  
  return(combined)
}
```
To use this function, it is enough to run something like.
```{r}
#| eval: false
statcast2024 <- annual_statcast_query(2024)
```
:::{#statcast-warning .callout-important}
## Time and disk space requirements
Scraping a single season of StatCast data can take between 30 and 45 minutes.
I **highly** recommend scraping the data for any season only once and saving the resulting data table in an `.RData` file that can be loaded into future R sessions.
```{r}
#| eval: false
library(tidyverse)
statcast2024 <- annual_statcast_query(2024)
save(statcast2024, file = "statcast2024.RData")
```
These `.RData` files take between 75MB and 150MB of space.
So, if you want to work with several seasons (e.g., going back all the way to 2008, the first season for which pitch tracking data is available), you will need about 2.5GB of storage space on your computer.
:::

### Working with StatCast data
```{r load-statcast}
#| echo: false
library(tidyverse)
load("~/Dropbox/Teaching/2025-26/stat479_f25_sports/lecture_planning/pitchFraming/statcast2024.RData")
load("~/Dropbox/Teaching/2025-26/stat479_f25_sports/lecture_planning/pitchFraming/statcast2023.RData")
load("~/Dropbox/Teaching/2025-26/stat479_f25_sports/lecture_planning/pitchFraming/statcast2022.RData")
load("~/Dropbox/Teaching/2025-26/stat479_f25_sports/lecture_planning/pitchFraming/statcast2021.RData")
```

In the 2024 season, we have StatCast data for 784,978 pitches.
The dataset records 118 different variables for each pitch.
Some of them are contextual variables like `game_pk`, which is the unique identifier for a game, and `game_date`, which is the date of the game, while others like `batter`, `pitcher`, and `fielder_2` list the players involved in the pitch.
The dataset also includes information about the pitch trajectory like `plate_x` and `plate_z`, which record the horizontal and vertical coordinates of the pitch as it crosses the front edge of home plate,  and the pitch outcome
The data table also contains 118 variables, many of which are defined in the [StatCast documentation](https://baseballsavant.mlb.com/csv-docs).
The function `annual_statcast_query` actually scrapes data not only from the regular season but also from the pre-season and the play-offs.
For our analysis, we will focus only on the regular season data.
The variable `game_type` records the type of game in which each pitch was thrown.
```{r table-game_type}
table(statcast2024$game_type, useNA = 'always')
```
Looking at the [StatCast documentation](https://baseballsavant.mlb.com/csv-docs), we see that regular season pitches have `game_type=="R"`.
We additionally filter out any pitches with nonsensical values like 4 balls or 3 strikes (for 2024, this turns out to be only 1 pitch).
```{r filter-regular-season}
statcast2024 <-
  statcast2024 %>% 
  filter(game_type == "R") %>%
  filter(strikes >= 0 & strikes < 3 & 
           balls >= 0 & balls < 4 & 
           outs_when_up >= 0 & outs_when_up < 3) %>%
  arrange(game_pk, inning, desc(inning_topbot), at_bat_number, pitch_number)
```
We're now left with 695,135 regular season pitches.

## Expected Runs

We will encode baserunner configuration using a binary string of length 3. 
If there is a runner on first base, the first digit will be a 1 and if there is not a runner on first base, the first digit will be a 0.
Similarly, the second and third digits respectively indicate whether there are runners on second and third base.
So if $\textrm{br} = "011"$ that means that there are runners on second and third base at the beginning of the at-bat but not on first base. 
The raw StatCast data contains variables `on_1b`, `on_2b`, and `on_3b`.
From a quick visual inspection of the dataset (e.g., with `statcast2024$on_1b[1:100]`), we find many `NA` values.
These correspond to pitches when there is nobody on that particular base.
When the value is not `NA`, it is the numeric id of the batting team player who is on that base.
To create the 3-digit binary string encoding baserunner configuration, notice that `1*(!is.na(on_1b))` will return a 1 if there is somone on first base and 0 otherwise.
So by pasting together the results of `1*(!is.na(on_1b))`, `1*(!is.na(on_2b))`, and `1*(!is.na(on_3b))`, we can form the 3-digit binary string described above. 
In the codeblock below, we also rename the column `outs_when_up` to `Outs`.
```{r add-baserunner}
statcast2024 <-
  statcast2024 %>%
  mutate(
    BaseRunner = 
      paste0(1*(!is.na(on_1b)),
             1*(!is.na(on_2b)),
             1*(!is.na(on_3b)))) %>%
  rename(Outs = outs_when_up)
```

There are 3 possible values for the number of outs ($\textrm{o} \in \{0,1,2\}$) and 8 possible values for the baserunner configuration ($\textrm{br} \in \{"000", "100", "010", "001", "110", "101", "011", "111"\}$).
So, there are 24 different values of run expectancy, which is often presented in a table with rows corresponding to baserunner configuration and columns corresponding to outs.


### Computing $\rho(\textrm{o}, \textrm{br})$

Computing $\rho(\textrm{o}, \textrm{br})$ is conceptually straightforward: we need to divide our observed at-bats into 24 bins, one for each combination of $(\textrm{o}, \textrm{br})$ and then compute the average value of $R$ within each bin.
This is *exactly* the same "binning-and-averaging" procedure we used to fit our initial XG models in [Lecture 2](lecture2.html).
We will do this using at-bats taken in the first 8 innings of played in the 2021, 2022, and 2023 regular seasons.
We focus only on the first 8 innings because the 9th and extra innings are fundamentally different than the others.
Specifically, the bottom half of the 9th (or later) innings is only played if the game is tied or the home team is trailing after the top of the 9th inning concludes.
In those half-innings, if played, the game stops as soon as a winning run is scored.
For instance, say that the home team is trailing by 1 runs in the bottom of the 9th and that there are runners on first and second base.
If the batter hits a home run, the at-bat is recorded as resulting in only two runs (the tying run from second and the winning run from first).
But the exact same scenario would result in 3 runs in an earlier inning. 

#### Computing runs scored in the half-inning
Suppose that in a given at-bat $a$ that there are $n_{a}$ pitches.
Within at-bat $a,$ for each $i = 1, \ldots, n_{a},$ let $R_{i,a}$ be the number of runs scored in the half-inning after that pitch (including any runs scored as a result of pitch $i$).
So $R_{1,a}$ is the number of runs scored in the half-inning after the first pitch, $R_{2,a}$ is the number of runs scored subsequent to the second pitch, etc. 
Our first step towards building the necessary at-bat-level data set will be to append a column of $R_{i,a}$ values to each season's StatCast data.

We start by illustrating the computation using a single half-inning from the Dodgers-Padres game introduced earlier.
The code below pulls out all pitches thrown in the top of the 8th inning of the game.
During this inning, the Dodgers scored 4 runs.
```{r dodgers-inning}
dodgers_inning <-
  statcast2024 %>%
  filter(game_pk == 745444 & inning == 8 & inning_topbot == "Top") %>%
  select(at_bat_number, pitch_number, Outs, BaseRunner,
         bat_score, post_bat_score, events, description, des,
         type, 
         on_1b, on_2b, on_3b, hc_x, hc_y, hit_location) %>%
  arrange(at_bat_number, pitch_number)
```
The column `bat_score` records the batting team's score **before** each pitch is thrown.
The column `post_bat_score` records the batting team's score **after** the the outcome of the pitch.
For most of the `{r} nrow(dodgers_inning)` pitches, we find that `bat_score` is equal to `post_bat_score`; this is because only a few pitches result in scoring events.
```{r dodgers-post-bat-score}
rbind(bat_score = dodgers_inning$bat_score, post_bat_score = dodgers_inning$post_bat_score)
```
Cross-referencing the table above with the [play-by-play data](https://www.espn.com/mlb/playbyplay/_/gameId/401568469), we see that the Dodgers score their second run after the 14th pitch of the half-inning (on a Enrique Hernández sacrifice fly); their third run on the very next pitch (Gavin Lux grounding into a fielder's choice); and their fourth and fifth runs on consecutive pitches (on singles by Mookie Betts and Shohei Ohtani).

![Dodgers-Padres Play-by-Play](figures/lecture3_dodgers_pbp.png){width=50% fig-align="center"}

We can verify this by looking at the variable `des`, which stores a narrative description about what happened during the at-bat. 
```{r dodgers-desc}
dodgers_inning$des[c(14,15, 18, 19)]
```
Notice that the maximum value of `post_bat_score` is the batting team's score at the **end** of the inning[^1].
Thus, to compute $R_{i,a}$ for all pitches in this inning, it is enough to subtract the corresponding `bat_score` value from the maximum value of `post_bat_score` across the whole half-inning.

[^1]: Try to justify why this is the case!

```{r dodgers-ria}
max(dodgers_inning$post_bat_score) - dodgers_inning$bat_score
```
We now append a column with these values to our data table `dodgers_inning`
```{r dodgers-append-ria}
dodgers_inning <-
  dodgers_inning %>%
  mutate(RunsRemaining = max(post_bat_score) - bat_score)
```

We're now ready to extend these calculation to every half-inning of every game in the season.
To do this, we will take advantage of the `group_by()` command in **dplyr** to apply the same calculation to small groups defined by game and half-inning.

```{r statcast-append-ria}
statcast2024 <-
  statcast2024 %>%
  group_by(game_pk, inning, inning_topbot) %>% # divide up by game and half-inning
  mutate(RunsRemaining = max(post_bat_score) - bat_score) %>%
  ungroup()
```

#### From pitches to at-bats

We now have the number of runs scored in the half-inning after each pitch.
But to compute run expectancy, we need this quantity at the at-bat level and not at the pitch-level.
Using our notation from before, note that $R_{1,a}$ is the number of runs scored after the first pitch of at-bat $a.$
So, to compute run expectancy, it is enough to pull out the first pitch from each at-bat (i.e., those pitches with `pitch_number == 1`) using the `filter()` function.
For instance, here is what that looks like in the top of the 8th inni

#### Putting it all together

We can loop over the pitch-by-pitch data from multiple seasons, append $R_{i,a}$ values to each one, and the number of outs, baserunner configuration, and $R_{1,a}$ for each at-bat in that season.
In the code below, we loop over each season and save the at-bat level run expectancy data in a list.
Then we stack the data frames on top over each other using the `bind_rows()` command.

```{r build-er-data}
er_data_list <- list() # list of save at-bat level data for previous seasons
for(year in 2021:2023){
  ix <- year-2020
  er_data <-
    get(paste0("statcast", year)) %>%
    filter(game_type == "R" & inning <= 8) %>%
    filter(strikes >= 0 & strikes < 3 & 
           balls >= 0 & balls < 4 & 
           outs_when_up >= 0 & outs_when_up < 3) %>%
    group_by(game_pk, inning, inning_topbot) %>%
    mutate(RunsRemaining = max(post_bat_score) - bat_score) %>%
    ungroup() %>%
    mutate(BaseRunner = 
             paste0(1*(!is.na(on_1b)), # 1st digit of string for baserunner
                    1*(!is.na(on_2b)), # 2nd digit of string for baserunner
                    1*(!is.na(on_3b)))) %>% # 3rd digit of string for baserunner
    arrange(game_pk, 
            inning, 
            desc(inning_topbot), # show bottom of innings before top
            at_bat_number, pitch_number) %>%
    filter(pitch_number == 1) %>%
    rename(Outs = outs_when_up) %>%
    select(Outs, BaseRunner, RunsRemaining)
 er_data_list[[ix]] <- er_data
 rm(er_data)
}
# stack data from all previous seasons into one bit dataframe
er_data_all <- dplyr::bind_rows(er_data_list)
```

We can now group the rows of `er_data_all` by combinations of baserunner and outs to compute $\rho(\textrm{o}, \textrm{br}).$ 

```{r compute-rho}
expected_runs <-
  er_data_all %>%
  group_by(Outs, BaseRunner) %>%
  summarize(rho = mean(RunsRemaining), .groups = "drop")
```

The table `expected_runs` contains one row for every combination of outs and base-runner configuration.
Traditionally, expected runs is reported using an $8\times 3$ matrix, with rows corresponding to base-runner configurations and columns corresponding to outs.
We can re-format `expected_runs` to this matrix format using the [`pivot_wider()`](https://tidyr.tidyverse.org/reference/pivot_wider.html) function
```{r pivot-rho}
expected_runs %>% 
  pivot_wider(names_from = Outs,
              values_from = rho,
              names_prefix="Outs: ")
```


## Run value

Suppose a batter comes up to the plate when there 2 outs and no runners on base . 
Based on the game state at the start of the at-bat (i.e., `Outs=2` and `BaseRunners='000'`), his team can expect to score 0.101 runs in the remainder of the half-inning.
Now suppose the batter his a double, advancing to second base and changing the game state to `Outs=2` and `BaseRunners='010'`
According to our expected runs matrix, from this updated state, the batting team expects to score 0.320 runs in the remaining of the half-inning.
If, however, the batter had struck out in this plate appearance, then he would have ended the half-inning, from which point his team can expect to score no runs in the remainder of the half-inning.
So, on average, the batter earns his team about 0.2 runs, on average, by hitting a double and advancing to second, and loses his team about 0.1 runs, on average, by striking out from the game state `Outs=2` and `BaseRunners='000'`.

::: {.callout-note icon=false}

## Run value
The **run value** of an at-bat is defined as the the number of runs scored in the at-bat plus the difference in expected runs from the starting to ending state.
That is, denoting the number of runs scored in the at-bat as $\textrm{RunsScored}$ and the starting and ending states as $(\textrm{o}_{\text{start}}, \textrm{br}_{\text{start}})$ and $(\textrm{o}_{\text{end}}, \textrm{br}_{\text{end}}),$ then
$$
\textrm{RunValue} = \textrm{RunsScored} + \rho(\textrm{o}_{\text{end}}, \textrm{br}_{\text{end}}) - \rho(\textrm{o}_{\text{start}}, \textrm{br}_{\text{start}}) 
$$
:::


To do compute the run value of each at-bat in the 2024 season, we must compute

  1. The number of runs scored during each at-bat
  2. The game state (i.e., the number of outs and the base-runner configuration) at the start and end of each at-bat
  3. The change in expected runs during the at-bat (i.e., $\rho(\textrm{o}_{\text{end}}, \textrm{br}_{\text{end}}) - \rho(\textrm{o}_{\text{start}}, \textrm{br}_{\text{start}})$).

We will first develop the necessary code using the data from Dodger's 8th inning from their game against the Padres.
Then, we will deploy that code to the whole `statcast2024` table by grouping by `game_pk` and `at_bat_number`. 



<!--
  1. RunsScore
  2. Filter to pitch_number == 1
  3. Group by game_pk and **arrange** by at_bat_number and look at Then use lead() to get the next state
  Whenever there is an NA this signals that this was the last at-bat of the inning
  We can set this to be a null-state 3.000 that has expected runs equal to 0.
-->


add columns to `statcast2024` containing the values of $\textrm{RunsScored},$ $\rho(\textrm{o}_{\text{end}}, \textrm{br}_{\text{end}}),$ and   $\rho(\textrm{o}_{\text{start}}, \textrm{br}_{\text{start}}).$

### Calculating RunsScored



### Computing the starting and ending states

Except for the very last pitch in a team's innings, the ending state of that pitch is, by definition, the starting state of the next pitch.
In order to compute $\rho(\textrm{o}_{\text{end}}, \textrm{br}_{\text{end}}),$ and $\rho(\textrm{o}_{\text{start}}, \textrm{br}_{\text{start}})$ for each at bat, we will first create a columns in `statcast2024` that encode the game state at the beginning and end of the at-bat.

To build up our code, let's continue with our running example of the Dodgers' 8th inning, focusing on the at the second through fifth at-bats[^1] of the inning.
```{r dodgers-first-3ab}
tmp <- dodgers_inning %>%
  arrange(at_bat_number, pitch_number) %>%
  mutate(next_out = lead(Outs),
         next_br = lead(BaseRunner),
         next_on_1b = lead(on_1b),
         next_on_2b = lead(on_2b),
         next_on_3b = lead(on_3b),
         next_hcx = lead(hc_x),
         next_hcy = lead(hc_y),
         next_hl = lead(hit_location)) %>%
  group_by(at_bat_number) %>%
  mutate(endOuts = last(next_out),
         endBaseRunner = last(next_br),
         end_on_1b = last(next_on_1b),
         end_on_2b = last(next_on_2b),
         end_on_3b = last(next_on_3b),
         end_hc_x = last(next_hcx),
         end_hc_y = last(next_hcy),
         end_hit_location = last(next_hl)) %>%
  select(at_bat_number, pitch_number, Outs, BaseRunner, on_1b, on_2b, on_3b, hc_x, hc_y, hit_location,
         endOuts, endBaseRunner, end_on_1b, end_on_2b, end_on_3b, end_hc_x, end_hc_y, end_hit_location,
         des) %>%
  ungroup()

# then do a join

# create a column with the very next pitch
# then, after grouping by at-bat number, create a column with the next value

```




We can use the `lead()` function to take the next starting state and ending state of at-bat a is the starting state of at-bat a+1
If we arrange the at-bats in increasing order of at-bat, then we want to copy over the starting state from row (a+1) into new columns of (a) for the ending state.
We can do this using the [`lead`](https://dplyr.tidyverse.org/reference/lead-lag.html) function.

Once we have those, we can use a join (just like we did with XG in Lecture 2) to add in the values of the starting and ending expected runs.

To do this, it will be useful to introduce one more game state, which corresponds to the end of a half-inning.
For simplicity, we will denote it as `Outs=3` and `BaseRunner='000'`.
will also add a new row for an end of inning (with corresponding $\rho$ value equal to 0)
```{r cleanup-expected-runs}
expected_runs <-
  expected_runs %>%
  add_row(Outs=3, BaseRunner="000", rho = 0)
```



```{r statcast24-abruns}
statcast2024 <-
  statcast2024 %>%
  group_by(game_pk, at_bat_number) %>%
  mutate(RunsAB = max(post_bat_score) - bat_score) %>%
  ungroup()
```




```{r}

post_rho <- expected_runs %>% rename(endOuts = Outs, endBaseRunner = BaseRunner, postrho = rho)

dodgers_inning %>%
  arrange(at_bat_number) %>%
  select(at_bat_number, Outs, BaseRunner) %>%
  mutate(postOuts = lead(Outs),
         postBaseRunner = lead(BaseRunner)) %>%
  mutate(postOuts = ifelse(is.na(postOuts), 3, postOuts),
         postBaseRunner = ifelse(is.na(postBaseRunner), '000', postBaseRunner)) %>%
  left_join(y = expected_runs, by = c("Outs", "BaseRunner")) %>%
  left_join(y = post_rho, by = c("postOuts", "postBaseRunner")) %>%
  select(at_bat_number, Outs, BaseRunner, rho, 
         postOuts, postBaseRunner, postrho)



```

We need to get at-bats


### Run-values

<!--
  1. Compute run-value of each at-bat
  2. Mimic Chapter 5 of Albert & Baumer & Marchi; sum up run-value and group by the base-runner configuration
  3. Summing up run-values over all plate appearances is what's known as RE24; how big is this
  4. " We can summarize a player’s batting performance in a season by the total number of plate appearances, the sum of the runs potentials, and the sum of the run values. One can remove pitchers and non-starters by focusing on batters with at least 400 plate appearances"
  
-->







Using our expected runs matrix, we can define the **run value**, which takes into account (i) the change in 

Based on the outcome of the plate appearance the *state* of the game (i.e., the combination of the )


Armed with run valu

While this matrix representation is nice, we ultimately want to create a table 



For reasons that will become clear shortly, we will create a new column that combines the out and baserunner configuration into a single string and will also add a new row for an end of inning (with corresponding $\rho$ value equal to 0)
```{r cleanup-expected-runs}
expected_runs <-
  expected_runs %>%
  add_row(Outs=3, BaseRunner="000", rho = 0) %>%
  mutate(obr_key = paste(Outs, BaseRunner, sep = "."))
```













<!--
Recall the interpretation of conditional expectation $\mathbb{E}[Y \vert X = x]$: we look at all possible combinations of $(X,Y)$ where $X = x$ and take the
In the context of expected runs, $Y$ is the number of runs scored in the half-inning.
And to estimate expected runs, we mirroed this definition: we looked




  Exercise: re-compute run expectancy based on the combination of outs, baserunners, and count. 
  What is the value of a called strike? 
-->






