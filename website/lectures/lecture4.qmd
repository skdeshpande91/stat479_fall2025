---
title: "Lecture 4: Wins above Replacement I"
format: html
execute:
  cache: true
---


## Overview: Allocation of credit in baseball


### Conditioning on Results



<!--
  Compare two plays in baseball. The batter hits a homerun; obviously they should get credit, pitcher should get little credit, and the fielders
  
  But in this second play the situation is a bit murkier, the batter puts the ball in play (which is better than striking out!); the baserunners advances, but the fielder 
  
  If we can divide up credit to the players and sum up over all plays, then we 
  
  Credit in baseball is often expressed in terms of run expectancy. Loosely, this combines what is expected to happen with what actually happened. Neither extreme is quite what we want
  
  Eventually when we aggregate, it is more useful to turn absolute numbers into a comparison. How much better than is one player's performance than another's.
  This is at the heart of the concept of "wins above replacement".
  
  While there are many proprietary approaches to computing this, we will emulate the calculation outlined by Baumer et al. in their landmark openWAR paper
  
  As with most lectures, there is a **lot** more in these notes than presented in lecture.
  
-->


### Key Topics

Expected runs framework





## Obtaining pitch-by-pitch data


### PitchF/X and StatCast
<!--
  What is PitchF/X and What is StatCast
-->







### Run expectancy (RE24)

Paraphrasing from [FanGraphs](https://library.fangraphs.com/misc/re24/), **R**un **E**xpectancy based on the **24** baserunner-out states (**RE24**) measures the change in expected runs from the beginning of a plate appearance to the end of the plate appearance.
It also measures the 
For each at-bat, we now need to look at the run expectancy at the start of the at-bat, the run-expectancy at the end of the at-bat. 


#### Runs scored in each at-bat

We need to compute how many runs were scored during each at-bat.
To do this, we can go back to our pitch-level data, group everything by at-bat number and look at the `max(post_bat_score)`.

```{r statcast24-abruns}
statcast2024 <-
  statcast2024 %>%
  group_by(game_pk, at_bat_number) %>%
  mutate(RunsAB = max(post_bat_score) - bat_score) %>%
  ungroup()
```

<!--
  BIG TO DO: how to get the next at-bat's starting state
  Filter down to pitch_number == 1, make sure to arrange by at_bat_number
  Group by game, inning, and inning top-bat. Then use lead() to get the next state
  Whenever there is an NA this signals that this was the last at-bat of the inning
  We can set this to be a null-state 3.000 that has expected runs equal to 0.
-->

<!--
  Definition, based on the 24 combinations of outs and baserunners
  Build the matrix
  Add EPA start and EPA after for each plate appearance. Also get number of runs scored in that plate appearance
-->


## Adjusting RE24 for platoon advantage & ballpark

<!--
  Regress delta onto park and indicator Bhand == Phand
  Get those residuals and add them to the data frame
-->


## Base-running

Quote from Baumer et al. "baserunners should only get credit for advancement beyond what would be expected given their starting locations, number of outs, and the hitting event that occurred"
<!--
  Regress residuals (epsilon) from above onto indicators for gamestate; hitting event that occured
  Resulting residual (eta): represent the portion of the adjusted oï¬€ensive run value that is attributable to the baserunners.
-->
### Expected base advancement

## Batting

<!--
eta: portion of adjusted offensive run value attributable to baserunners.
mu = epsilon-eta attributable to the hitter
** need to compare batter relative to other players at his position **

-->


